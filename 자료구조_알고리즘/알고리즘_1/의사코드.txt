의사코드
: 코드 작성 전 프로그램의 작동 논리를 일상 언어로 작성하는 것 
의사 코드 작성 시 시간을 단축할 수 있고, 프로그래밍 언어를 모르는 사람과도 소통할 수 있다. 
그리고 로직에 집중할 수 있기 때문에 오류 발생 시 원인 파악이 쉬워져 디버깅에 용이하다. 

의사코드 양식
- 자연어 사용 ( 다른 사람도 이해할 수 있는 일상에서 사용하는 언어)
- 자연어 + 프로그래밍 언어 
--------------------------------------------------------------------------------------------------------
ex) 정수형 배열의 다음 요소들이 이전 요소들의 합보다 큰지 확인 

변수 sum = 0번째 인덱스의 값
반복문 for ( 1번째 인덱스의 값부터 배열의 길이만큼 반복)

if) i번째 인덱스의 값이 sum보다 작거나 같으면 false를 반환 -> 함수 종료

else) sum + = arr[i] //다음 요소의 값과 비교하기 위해 이전의 요소들을 더해준다. 
반복문 종료 시 true 반환
--------------------------------------------------------------------------------------------------------
ex) 숫자로 이루어진 문자열을 입력받아 연속된 홀수가 있을 경우 숫자 사이에 -를 추가

함수처리를 위한 문자열 -> 문자 배열로 만들어 각 요소를 분리 
반환될 결과를 저장할 문자열 

반복문 for( 1번째 인덱스의 값부터 배열의 길이만큼 반복)

i-1번째 문자와, i번째 문자를 정수형으로 변환해 처리 

if( i-1번째 값과, i번째 값이 모두 홀수) //연속된 홀수 
결과 문자열 + i-1번째 문자열 + "-"

else(하나라도 홀수가 아니다)
결과 문자열 + i-1번째 문자열

예외 처리 if) 인덱스가 마지막인 경우 현재 문자를 추가한다.
결과 문자열 + i번째 문자열 

반복문 종료 시 결과 문자열 반환
--------------------------------------------------------------------------------------------------------

문제 해결 

1. 정렬 : N개의 숫자들을 특정 기준에 맞게 순서 조정
2. 그래프 탐색 : 탐색방식에 따라 DFS, BFS 

완전 탐색( brute force) : 모든 경우의 수를 전부 확인해 문제 해결
시뮬레이션 ( simulation) : 문제의 복잡한 요구사항을 빼놓지 않고 코드로 작성 

- 시뮬레이션
모든 과정과 조건 제시, 과정을 통한 결과 확인하는 유형 