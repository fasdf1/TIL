----------------------------------------------------------------------------------------------------
완전 탐색 알고리즘(Brute-Force Algorithm)

: 무차별 대입 방법, 모든 가능성을 시도하는 것 
 문제에 대한 적절한 해결방법을 찾기 전 시도할 수 있다. 
 하지만 데이터의 범위가 커질수록 비효율적이다. 
----------------------------------------------------------------------------------------------------
완전 탐색 알고리즘을 사용하는 경우
 
- 프로세스 속도 상승을 위한 다른 알고리즘이 없을 때
- 각 문제 해결 솔루션들을 확인해야 할 때 
----------------------------------------------------------------------------------------------------
완전 탐색 알고리즘의 한계

문제의 복잡도에 매우 민감하다. 
일반적으로 자원이 충분할 때 사용한다. 
----------------------------------------------------------------------------------------------------
- 완전 탐색 알고리즘의 사용 예시 

1. 순차 검색 알고리즘 (Sequential Search )
: 배열 안에 특정 값이 존재하는지 확인할 때 인덱스 0부터 마지막 인덱스까지 차례로 검사한다. 

2. 문열 매칭 알고리즘 ( Brute-Force String Matching)
: 길이가 n인 전체 문자열이 길이가 m인 문자열 패턴을 포함하는지 검사한다. 

3. 선택 정렬 알고리즘 ( Selection Sort)
: 전체 배열을 검색해 현재 요소와 비교하고 요소들이 모두 정렬될 때까지 
  오름차순이나 내림차순으로 요소들을 교환
-오름차순: 현재 값이 나머지 최소값보다 크다면 교환 

4. 버블 정렬 알고리즘 ( Bubble Sort)

5. Tree 구조의 완전 탐색 알고리즘 ( BFS, DFS)

6. 동적 프로그래밍( Dynamic Programming) 

----------------------------------------------------------------------------------------------------