---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
1. Tree 

단방향 그래프의 한 구조
하나의 뿌리로부터 가지가 사방으로 뻗은 형태
데이터가 바로 아래에 있는 하나 이상의 데이터에 무방향으로 연결된 계층적 자료구조
선형 구조가 아니라, 하나의 데이터 아래에 여러 개의 데이터가 존재할 수 있는 비선형 구조 
+) 선형 구조: 데이터를 순차적으로 나열시킨 구조
계층적 표현, 아래로만 뻗어나가기 때문에 사이클 X

루트(Root) : 트리 구조의 시작점이 되는 노드 
루트를 시작으로 여러 개의 데이터를 간선으로 연결
각 데이터 = 노드 
두 개의 노드가 상하 계층으로 연결되면 부모/자식 관계
상위 : 부모 노드, 하위: 자식 노드 
리프 노드(Leaf Node) : 트리 구조의 끝 지점이고, 자식 노드가 없는 노드 
---------------------------------------------------------------------------------------------------------
- Tree의 깊이, 높이, 레벨 측정

- 깊이(depth) 
: 루트로부터 하위 계층의 특정 노드까지의 깊이 
  루트는 0, 루트 아래 1, 2, 3.... 

- 레벨(Level)
같은 깊이를 가지고 있는 노드를 묶어서 레벨로 표현한다. 
형제 노드(Sibling Node) : 같은 레벨에 나란히 있는 노드를 

- 높이(Height)

리프 노드(0)를 기준으로 루트까지의 높이 표현 가능 
부모 노드의 높이 : 자식 노드의 가장 높은 height + 1

- 서브 트리(Sub Tree)

Root로부터 뻗어 나오는 큰 트리의 내부에, 트리 구조를 갖춘 작은 트리
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
2. Graph
여러개의 점들이 서로 복잡하게 연결되어 있는 관계를 표현한 자료구조

- Graph의 구조
직접적인 관계가 있는 경우 두 점 사이를 선으로 이어준다.
간접적인 관계의 경우 몇 개의 점과 선에 걸쳐 이어진다.
정점(vertex) : 하나의 점
간선(edge) : 하나의 선
인접 (adjacency): 두 정점 간에 간선이 직접 이어져 있다
인접 정점 (adjacent vertex): 하나의 정점에서 간선에 의해 직접 연결되어 있는 정점
자기 루프 (self loop): 정점에서 진출하는 간선이 곧바로 자기 자신에게 진입하는 경우
사이클 (cycle): 한 정점에서 출발하여 다시 해당 정점으로 돌아갈 수 있다 -> 사이클이 있다. 
무방향 그래프 : 양쪽으로 이동 가능
단방향 그래프 : 한쪽으로만 이동 가능( 단방향 간선) 

-Graph의 표현 방식

1. 인접 행렬 
두 정점은 인접하다 : 두 정점을 바로 이어주는 간선이 있다. 
인접 행렬:  서로 다른 정점들이 인접한 상태인지를 표시한 행렬( 2차원 배열의 형태) 
A와 B가 이어져 있다면 1(true), 이어져 있지 않다면 0(false)로 표시 

+) 가중치 그래프라면 1 대신 관계에서 의미 있는 값을 저장 

 두 정점 사이에 관계가 있는지, 없는지 확인하기에 용이
 가장 빠른 경로를 찾을 때 주로 사용 

2. 인접 리스트 
각 정점이 어떤 정점과 인접하는지를 리스트의 형태로 표현
각 정점마다 하나의 리스트를 가진다.
리스트는 자신과 인접한 다른 정점을 담고 있다. 

우선 순위에 따라 정렬할 수도 있지만, 우선 순위가 없다면 정점들은 단순히 나열한 리스트가 된다. 

메모리를 효율적으로 사용하려 할 때 주로 사용 
+)인접 행렬:  연결 가능한 모든 경우의 수를 저장 -> 메모리 효율 떨어짐


가중치 그래프 (weighted Graph)
: 연결의 강도(추가적인 정보, 위의 예시에서는 서울-부산으로 가는 거리 등)가 얼마나 되는지 적혀져 있는 그래프
비가중치 그래프
:  (unweighted Graph): 연결의 강도가 적혀져 있지 않는 그래프

비가중치 그래프에서 간선은  두 개가 이어져 있다는 사실만 알려줄 뿐, 그 외의 정보는 포함하지 X 
만약 연결 유무를 판단하는 것만이 아닌 자세한 정보를 포함하고 싶다면 가중치 그래프를 사용하면 된다. 


---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
3. BST (Binary Search Tree) 
자식 노드가 최대 두 개인 노드들로 구성된 트리
 두 개의 자식 노드는 왼쪽 자식 노드와 오른쪽 자식 노드로 나눈다. 

특징
: 모든 왼쪽 자식의 값 < 루트 or 부모
  모든 오른쪽 자식의 값 > 루트 or 부모

- 자료의 삽입, 삭제 방법에 따라 구분 

3-1. 정 이진 트리(Full binary tree)
: 각 노드가 0개 or 2개의 자식 노드를 가진다. 

3-2. 완전 이진 트리(Complete binary tree)
: 정 이진트리이자 완전 이진트리인 경우
 모든 리프 노드의 레벨이 동일, 모든 레벨이 가득 채워져 있는 트리 

3-3. 포화 이진 트리(Perfect binary tree)
: 마지막 레벨을 제외한 모든 노드가 가득 차 있다.
마지막 레벨의 왼쪽 노드만 꼭 채워져 있어야 하고, 
다른 마지막 레벨의 노드는 전부 차 있지 않아도 된다. 
 
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
