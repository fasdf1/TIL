자료 구조 : 여러 데이터의 묶음을 저장하고, 사용하는 방법을 정의한 것

데이터 자체만으로 어떤 정보를 가지긴 힘들다. 
데이터를 분석하고 정리해서 활용해야 의미가 있다. 
(데이터의 특징 분석 - 정리 - 활용)
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
1. Stack 

데이터를 순서대로 쌓는 자료 구조

입력과 출력이 하나의 방향으로 이루어져 있다. // 제한적 접근(하나의 입출력 방향)

LIFO ( Last In First Out ), FILO( First In Last out)
: 먼저 들어간 데이터는 제일 나중에 나온다. 

Stack에 데이터를 넣는 것 : PUSH
Stack에서 데이터를 꺼내는 것 : POP
!) 데이터는 하나씩만 넣거나 꺼낼 수 있다.

Java에서는 기본적으로 Stack, Queue를 제공하지만 ArrayList를 통해 Stack을 구현할 수 있다. 
( 자료구조는 자료(데이터)를 다루는 구조 그 자체를 의미하는 것이며 구현 방식은 자유롭다 )
-------------------------------------------------------------------------------------------------------------------
ex) 
박스 : 자료구조  stack
책 : 데이터 

박스에 책을 쌓는다. 
박스의 아랫 부분은 막혀 있으므로 
가장 먼저 쌓은 책은 가장 나중에 꺼낼 수 있고, 
가장 나중에 쌓은 책은 가장 먼저 꺼낼 수 있다.  
-------------------------------------------------------------------------------------------------------------------
- Stack의 예제 
: 브라우저의 뒤로 가기, 앞으로 가기 기능

현재 페이지에서 새로운 페이지로 접속 
: 현재 페이지를 Prev Stack에 보관한다. 

뒤로 가기 버튼 -> 현재 페이지에서 이전 페이지로 돌아갈 때 
: 현재 페이지를 Next Stack에 보관, Prev Stack에 가장 최근에 PUSH한 페이지를 현재 페이지로 가져옴

앞으로 가기 버튼 -> 현재 페이지에서 앞서 방문한 페이지로 이동 
: Next Stack에 가장 최근에 PUSH한 페이지를 가져옴, 현재 페이지를 Prev Stack에 보관
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
2. Queue

Stack과 반대 개념으로 데이터를 입력된 순서대로 처리할 때 주로 사용

입력과 출력의 방향이 각각 존재 ( 두 개의 입출력 방향 )

Queue에 데이터를 넣는 것 : enqueue
Queue에서 데이터를 꺼내는 것 : dequeue

FIFO ( First In First Out) : 먼저 들어간 데이터가 제일 먼저 나오는 선입선출 구조 
!) 데이터는 하나씩만 넣거나 꺼낼 수 있다.

!) 선형큐의 단점
:  하나의 원소가 빠져나가면 다음 요소들이 앞으로 하나씩 당겨지기 때문에 속도가 느리다.   
-------------------------------------------------------------------------------------------------------------------
ex)
은행 대기번호 발급기 : 자료구조 Que
대기자 : 데이터 

대기자들이 줄을 서서 번호표를 뽑는다. 
발급 받은 번호의 순서대로 은행 업무를 처리할 수 있으므로
가장 먼저 번호를 뽑은 사람이 먼저 업무를 처리한다. 
가장 나중에 번호를 뽑은 사람이 마지막에 업무를 처리한다. 

-------------------------------------------------------------------------------------------------------------------
- Queue의 예제 
: 프린터에서 여러 문서를 순서대로 인쇄 

문서 작성 후 출력 버튼 누르기 
: 해당 문서는 인쇄 작업 Queue에 들어간다. 

프린터는 인쇄 작업 Queue에서 데이터를 받아 순서대로 인쇄 (일정한 속도로 처리) 

-> 컴퓨터 장치들 간 데이터 송수신 시 각 장치에 존재하는 속도와 시간 차이를 극복하기 위해
   임시 기억 장치의 자료구조로 Queue를 사용하며, 이것을 버퍼라고 한다. 
   (  컴퓨터 장치들의 이벤트는 불규칙적으로 발생
      이벤트 처리 장치(ex: CPU)는 일정한 처리 속도를 가짐 
     불규칙적으로 발생한 이벤트를 규칙적으로 처리하기 위해 버퍼를 사용)
 
-------------------------------------------------------------------------------------------------------------------
+) 원형 큐(Circular Queue) 
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------