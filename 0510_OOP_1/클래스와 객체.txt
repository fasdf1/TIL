
< Class>
======================================================================
---------------------------------------------------------------------------------------------------------------
- 객체
: 우리가 인지할 수 있는 ‘실재하는 모든 것’이자 ‘사용할 수 있는 실체'를 의미한다.

- 클래스(Class)
클래스(Class)란 새로운 객체를 만들기 위한 설계도 
클래스는 객체를 생성하는데 사용되며, 반대로 객체는 클래스에 정의되고 설계된 내용 그대로 생성됩니다

!) 클래스는 객체 그 자체가 아니라 단지 객체를 생성하는 데 사용되는 하나의 틀이며 클래스는 객체 그 자체가 될 수 없다.
  (클래스는 객체를 만들기 위해 필요한 요건들을 정의해놓은 것)
ex) 집에 대한 설계도(클래스) - 설계도를 통해 만들어진 각각의 집(객체) 

클래스를 통해 생성된 객체를 해당 클래스의 인스턴스(instance)라고 부른다.
인스턴스화(instantiate) : 클래스로부터 객체를 만드는 과정

---------------------------------------------------------------------------------------------------------------
- 객체와 인스턴스의 차이
객체: 클래스로 구현한 대상
인스턴스: 메모리에 할당된 데이터
---------------------------------------------------------------------------------------------------------------
- 클래스의 구성요소와 기본 문법

class 키워드를 사용, 클래스명은 주로 대문자로 시작하는 것이 관례

ex) 
class ClassName{ 
     기능
}

클래스는 크게 네 가지의 요소로 구성된다.

ex) 
public class TestClass {
	int a = 100; // (1)필드
	void printVariable() {...} // (2)메서드
	TestClass {...} // (3)생성자
	class TestClass2 {...} // (4)이너 클래스
} 

(1) 필드(field) - 클래스의 속성을 나타내는 변수입니다. 차로 예를 들면 모델명, 컬러, 바퀴의 수 등이 포함될 수 있습니다.
(2) 메서드(method) - 클래스의 기능을 나타내는 함수입니다. 차를 예로 들면 시동하기, 가속하기, 정지하기 등이 포함될 수 있습니다.
(3) 생성자(constructor) - 클래스의 객체를 생성하는 역할을 합니다. 뒤의 내용에서 좀 더 자세히 학습하도록 합니다.
(4) 이너 클래스(inner class) - 클래스 내부의 클래스를 의미합니다.

클래스의 멤버(member): field, method, inner class
필드와 메서드는 각각의 클래스가 가지는 속성(state)와 기능(behavior)을 대표한다.
(속성과 기능은 해당 클래스와 관련된 데이터의 집합이며, 핵심적인 정보를 담고있다)
---------------------------------------------------------------------------------------------------------------
======================================================================
<Object>
---------------------------------------------------------------------------------------------------------------
객체 
클래스를 통해 만들어진 실제로 사용할 수 있는 실체 

객체는 크게 속성과 기능이라는 두 가지 구성요소로 이뤄져 있다.
속성: 필드
기능: 메서드
하나의 객체는 다양한 속성과 기능의 집합으로 이뤄져 있다.
이러한 속성과 기능은 이너클래스와 함께 객체의 멤버(member)라 부른다.

ex) 
차의 속성 : 모델명, 문의 개수, 컬러, 가격 등
차의 기능: 시동 걸기, 가속하기, 정지하기  등 
---------------------------------------------------------------------------------------------------------------
new 키워드를 사용해 실제 객체를 생성하여 클래스 멤버에 접근이 가능하다.
class CarTest {
	public static void main(String[] args) {
	Car stinger = new Car(); // Car 클래스로 타입으로 만들어진 stinger 인스턴스
	Car k5 = new Car(); // Car 클래스로 타입으로 만들어진 k5 인스턴스
	Car lincoln = new Car(); // Car 클래스로 만들어진 lincoln 인스턴스
}
======================================================================
<객체의 생성과 활용>
---------------------------------------------------------------------------------------------------------------
- 객체의 생성

1. 클래스명 참조_변수명; // 인스턴스를 참조하기 위한 참조변수 선언
2. 참조_변수명 = new 생성자(); // 인스턴스 생성 후, 객체의 주소를 참조 변수에 저장한다

Car lincoln;
lincoln = new Car( );

1. 특정 클래스 타입의 참조변수를 선언한다.
2. 참조변수가 선언되면, new 키워드와 생성자를 통해 인스턴스를 생성하여 참조변수에 할당한다.
+) 참조 변수는 실제 데이터 값이 아닌 실제 데이터가 저장되어 있는 힙 메모리의 주소값을 저장한 변수.

생성자를 통해 객체가 만들어지면 new 키워드를 통해 해당 객체를 힙메모리에 저장한다.
+) 생성자: 클래스와 동일한 이름을 가졌지만 뒤에 소괄호가 붙는다. 
+) new 키워드: 생성된 객체를 힙 메모리에 넣으라는 의미
+) new 키워드와 생성자를 통해 클래스의 객체를 생성한다 == 해당 객체를 힙 메모리에 넣고 그 주소값을 참조변수에 저장한다

1. 클래스명 참조_변수명 = new 생성자();

Car lincoln = new Car();
참조 변수는 실제 데이터가 위치해있는 힙 메모리의 주소를 저장하는 변수를 의미

클래스는 클래스 영역, 참조 변수는스택 영역에 저장된다. 
참조변수는 객체의 실제 값이 아닌 힙에 저장되어 있는 주소값
생성자로 만들어진 인스턴스는 힙 메모리 영역에 위치하며, 객체 내부에는 클래스의 멤버들이 위치
메서드 구현 코드는 클래스 영역에 저장되고 객체 안 메서드는 그 위치를 가리킨다.
같은 클래스로 만든 모든 객체는 동일한 메서드 값을 공유하기 때문에 
여러 번 같은 메서드를 선언해주는 것이 아니라 한번만 저장해두고 필요한 경우에만 클래스 영역에 정의된 메서드를 찾아 사용

!) 생성된 객체에서 필드값은 실제 저장공간이 객체 내부에 있다
  메서드는 다른 영역에 하나만 저장해놓고 이를 공유한다
---------------------------------------------------------------------------------------------------------------
- 객체의 활용
포인트 연산자( . ) : 해당 위치에 있는 객체 안을 보라는 뜻
. 을 활용하여 특정 인스턴스 객체의 필드와 메서드, 즉 객체의 멤버들에 접근한다.

1. 필드값 불러오기 
  참조 변수명.필드명
2. 메서드 호출
  참조 변수명.메서드명();
---------------------------------------------------------------------------------------------------------------


