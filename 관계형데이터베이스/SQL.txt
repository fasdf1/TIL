---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
- 데이터베이스의 필요성 

1. In - Memory 
: 데이터가 프로그램의 실행에 의존하는 경우가 있다. 
(데이터의 수명이 프로그램의 수명에 의존하게 된다)

2. File I/O 
:  엑셀 시트나 CSV 같은 파일의 형태는 이터가 필요할 때마다 전체 파일을 매번 읽는다.
   파일 손상 or 데이터량이 많을수록 데이터를 읽는 작업이 힘들어진다. 
  -> 비효율적
관계형 데이터베이스는 하나의 CSV 파일이나 엑셀 시트를 한 개의 테이블로 저장할 수 있고,
한 번에 여러 개의 테이블을 가질 수 있기 때문에 SQL을 통해 데이터를 불러오기 수월하다. 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
- Structured Query Language
 : 구조화된 Query 언어 // Query : 질의문
  다양한 데이터베이스(MySQL,Oracle,SQLite 등)에서 SQL 구문을 사용 가능
  데이터베이스 용 프로그래밍 언어
  데이터베이스에 쿼리를 보내 원하는 데이터를 가져오거나 삽입 가능 
  SQL을 사용하기 위해서 데이터의 구조는 고정되어 있어야 한다. 

+)  NoSQL 
: 데이터의 구조가 고정되어 있지 않은 데이터베이스
관계형 데이터베이스와 달리 테이블을 사용하지 않고 데이터를 다른 형태로 저장 
eX) MongoDB : 문서 지향 데이터베이스 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
- 기본 쿼리문 

1. 데이터베이스 생성
->   CREATE DATABASE 데이터베이스_이름;

2. 데이터베이스 사용
: 데이터베이스를 이용해 테이블을 만들거나 조작하려는 경우 데이터베이스를 사용하겠다는 명령어를 먼저 전달해야 한다. 
-> USE 데이터베이스_이름;

3. 테이블 생성
: 테이블은 필드(열)와 함께 만들어야 한다. 
-> CREATE TABLE student(
  	studentid int PRIMARY KEY AUTO_INCREMENT,
  	name varchar(255),
  	major varchar(255)
    );

4. 테이블 정보 확인 
-> DESCRIBE student;
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

- SQL  명령어
---------------------------------------------------------------------------------------------------
1. SELECT : 데이터셋에 포함될 특성을 특정한다. 
---------------------------------------------------------------------------------------------------
- SELECT 실행 순서 
: SELECT는  정해진 순서대로 동작

FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
---------------------------------------------------------------------------------------------------
2. FROM : 테이블과 관련된 작업을 할 때 반드시 입력
-> SELECT 특성 
    FROM 테이블이름

-> SELECT 특성1, 특성2, ...  //여러 개의 특성 선택
    FROM 테이블이름

-> SELECT *            //와일드카드 *은 모든 특성 선택
    FROM 테이블 이름 
---------------------------------------------------------------------------------------------------
3. WHERE : 필터 역할, 선택적 사용

3-1.  특정 값과 동일한 데이터 찾기
-> SELECT 특성_1, 특성_2
    FROM 테이블_이름
    WHERE 특성_1 = "특정 값"


3-2. 특정 값을 제외한 값을 찾기
-> SELECT 특성_1, 특성_2
    FROM 테이블_이름
    WHERE 특성_2 <> "특정 값"


3-3. 특정 값보다 크거나 작은 데이터를 찾기 ( <,>,<=,>=)
-> SELECT 특성_1, 특성_2
    FROM 테이블_이름
    WHERE 특성_1 > "특정 값"

    SELECT 특성_1, 특성_2
    FROM 테이블_이름
    WHERE 특성_1 <= "특정 값"

3-4. 문자열에서 특정 값과 비슷한 값들을 찾기 ( LIKE  \% or LIKE \* )
->  SELECT 특성_1, 특성_2
     FROM 테이블_이름
     WHERE 특성_2 LIKE "%특정 문자열%"

3-5. 리스트의 값들과 일치하는 데이터를 찾기 (IN)
->  SELECT 특성_1, 특성_2
     FROM 테이블_이름
     WHERE 특성_2 IN ("특정값_1", "특정값_2")

3-6. 값이 없는 경우인 'NULL'을 찾을 때 (IS)
-> SELECT *
    FROM 테이블_이름
    WHERE 특성_1 IS NULL

3-7. 값이 없는 경우를 제외한 데이터를 찾을 때 (NOT 추가) 
-> SELECT *
    FROM 테이블_이름
    WHERE 특성_1 IS NOT NULL
---------------------------------------------------------------------------------------------------
4. ORDER BY 
: 반환되는 데이터 결과를 어떤 기준으로 정렬해 출력할지 결정, 선택적 사용 

4-1. 기본정렬(오름차순)
-> SELECT *
    FROM 테이블_이름
    ORDER BY 특성_1

4-2. 내림차순 
-> SELECT *
    FROM 테이블_이름
    ORDER BY 특성_1 DESC
---------------------------------------------------------------------------------------------------
5. LIMIT
: 결과로 출력할 데이터의 갯수를 지정, 선택적 사용, 쿼리문에서 사용 시 가장 마지막에 추가

//데이터 결과를 10개만 출력
-> SELECT *
    FROM 테이블_이름
    LIMIT 10
---------------------------------------------------------------------------------------------------
6. DISTINCT
: 유니크한 값을 받을 때 SELECT DISTINCT 

6-1. 특성을 기준으로 유니크한 값들만 선택한다. 
-> SELECT DISTINCT 특성_1
    FROM 테이블_이름

6-2. 여러 개의 특성의 유니크한 조합 값들을 선택한다. 
-> SELECT
       DISTINCT
         특성_1
         ,특성_2
         ,특성_3
     FROM 테이블_이름
---------------------------------------------------------------------------------------------------
7. INNER JOIN : INNER JOIN 이나 JOIN 으로 실행

//둘 이상의 테이블을 서로 공통된 부분을 기준으로 연결
-> SELECT *
    FROM 테이블_1
    JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B
---------------------------------------------------------------------------------------------------
8. OUTER JOIN 

8-1. LEFT OUTER JOIN으로 LEFT INCLUSIVE 실행
-> SELECT *
   FROM 테이블_1
   LEFT OUTER JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B

8-2.  RIGHT OUTER JOIN으로 RIGHT INCLUSIVE 실행
-> SELECT *
    FROM 테이블_1
    RIGHT OUTER JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B

---------------------------------------------------------------------------------------------------
ex) 
 Brazil에서 온 고객을 도시별로 묶은 뒤에, 각 도시 수에 따라 내림차순 정렬
 CustomerId에 따라 오름차순으로 정렬한 3개의 결과만 요청

SELECT c.CustomerId, c.FirstName, count(c.City) as 'City Count'
FROM customers AS c
JOIN employees AS e ON c.SupportRepId = e.EmployeeId
WHERE c.Country = 'Brazil'
GROUP BY c.City
ORDER BY 3 DESC, c.CustomerId ASC
LIMIT 3
---------------------------------------------------------------------------------------------------
- SQL 내장함수

- 집합 연산 : 레코드를 조회하고 분류한 뒤, 특정 작업을 하는 연산

1. GROUP BY 
: 데이터를 조회할 때 그룹으로 묶어서 조회 

2. HAVING 
: GROUP BY로 조회된 결과를 필터링한다. 

3. COUNT( )
: 레코드의 개수를 집계할 때 사용 

4. SUM ( )
: 레코드의 합을 리턴 

5. AVG( )
: 레코드의 평균값을 계산

6. MAX( ), MIN( )
: 레코드의 최대값과 최소값을 리턴 

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
- 트랜잭션
여러 개의 작업을 하나로 묶은 실행 유닛
각 트랜잭션은 하나의 특정 작업으로 시작해 묶인 모든 작업들을 완료해야 정상 종료
(하나라도 실패하면 모든 작업 실패)

---------------------------------------------------------------------------------------------------
- ACID
데이터베이스의 트랜잭션은 ACID라는 특성을 가진다. 
ACID는 데이터베이스 내에서 일어나는 하나의 트랜잭션의 안전성을 보장하기 위한 것이다. 

1. Atomicity(원자성)

하나의 트랜잭션에 속해있는 모든 작업이 전부 성공하거나 전부 실패해서 결과 예측이 가능해야 한다. 
하나의 단위에 속해있는 여러 작업이 부분적으로 실행되면 데이터가 오염될 수 있다. 
하나의 작업이라도 실패하면 모든 작업이 실패로 돌아가 기존 데이터를 보호한다. 

2. Consistency(일관성)

데이터베이스의 상태가 일관되어야 한다
하나의 트랜잭션 이전과 이후, 데이터베이스의 상태는 이전과 같이 유효해야 한다. 
트랜잭션 이후의 데이터베이스는 데이터베이스의 제약이나 규칙을 만족해야 한다. 

ex) DB의 제약 : 모든 학생은 학번을 가지고 있어야 한다.
쿼리1. 학번이 없는 학생 추가  
쿼리2. 기존 학생의 학번을 삭제 
일관성을 위반하는 트랜잭션(쿼리1,쿼리2) 수행 시 DB의 제약을 위반한다. 
(일관되지 않은 상태)

3. Isolation(격리성, 고립성)

모든 트랜잭션은 다른 트랜잭션으로부터 독립되어야 한다 
각 트랜잭션은 서로의 연산을 확인받거나 영향을 줄 수 없다. 
트랜잭션이 동시에 실행될 때와 연속으로 실행될 때의 데이터베이스 상태가 동일해야 한다. 
동시에 여러 개의 트랜잭션들이 수행될 때, 각 트랜젝션은 고립되어 있어 연속으로 실행된 것과 동일한 결과를 출력


4. Durability(지속성)
하나의 트랜잭션이 성공적으로 수행되었다면, 해당 트랜잭션에 대한 로그가 남아야 한다. 
런타임 오류나 시스템 오류가 발생하더라도, 해당 기록은 영구적이어야 한다

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

- SQL(구조화 쿼리 언어) vs. NoSQL(비구조화 쿼리 언어)
---------------------------------------------------------------------------------------------------
데이터베이스는 크게 관계형 데이터베이스와 비관계형 데이터베이스로 구분
만들어진 방식, 저장하는 정보의 종류, 그리고 저장하는 방법 등에 차이가 있다. 
---------------------------------------------------------------------------------------------------
관계형 데이터베이스는 SQL을 기반
비관계형 데이터베이스는 NoSQL로 데이터를 처리 
---------------------------------------------------------------------------------------------------
- 관계형 데이터베이스
테이블의 구조와 데이터 타입 등을 사전에 정의하고, 테이블에 정의된 내용에 알맞은 형태의 데이터만 삽입 가능
 행(row)과 열(column)로 구성된 테이블에 데이터를 저장
각 열은 하나의 속성에 대한 정보를 저장
행에는 각 열의 데이터 형식에 맞는 데이터가 저장
데이터를 입력할 때 스키마에 맞게 입력
특정한 형식을 지키기 때문에, 데이터를 정확히 입력했다면 데이터를 사용할 때에는 매우 수월
 SQL을 활용해 원하는 정보 쿼리 가능
->  스키마가 뚜렷하게 보인다, 테이블 간의 관계를 직관적으로 파악

ex)  MySQL, Oracle, SQLite, PostgresSQL, MariaDB 등
---------------------------------------------------------------------------------------------------
- NoSQL 
데이터가 고정되어 있지 않은 데이터베이스
NoSQL에 스키마가 반드시 없는 것은 아니다. 
데이터를 읽어올 때 스키마에 따라 데이터를 읽는다. 
-> schema on read : 읽어올 때에만 데이터 스키마가 사용
데이터를 쓸 때 정해진 방식이 없는 것은 아니며, 데이터를 입력하는 방식은 데이터를 읽는 경우에 영향을 준다.

ex)  몽고DB, Casandra 등
---------------------------------------------------------------------------------------------------
- NoSQL 기반의 비관계형 데이터베이스의 구성 

1. Key-Value 타입
: 속성을 Key-Value의 쌍으로 나타내는 데이터를 배열의 형태로 저장
  Key : 속성 이름, Value: 속성에 연결된 데이터 값 
  ex) key-Value 형식의 데이터 베이스 :  Redis, Dynamo 등

2. 문서형(Document) 데이터베이스 
: 데이터를 테이블이 아닌 문서처럼 저장하는 데이터베이스
 JSON과 유사한 형식의 데이터를 문서화하여 저장 
 각각의 문서는 하나의 속성에 대한 데이터를 가지고 있고, 컬렉션이라고 하는 그룹으로 묶어서 관리
  ex) 문서형 데이터베이스 : MongoDB

3. Wide-Column 데이터베이스
: 데이터베이스의 열(column)에 대한 데이터를 집중적으로 관리하는 데이터베이스
 각 열에는 key-value 형식으로 데이터가 저장
  컬럼 패밀리(column families)라고 하는 열의 집합체 단위로 데이터를 처리
  하나의 행에 많은 열을 포함할 수 있어서 유연성이 높다. (데이터 처리에 필요한 열을 유연하게 선택)
   -> 규모가 큰 데이터 분석에 주로 사용
  ex) wide-column 데이터베이스 :  Cassandra, HBase

4. 그래프(Graph) 데이터베이스
: 자료구조의 그래프와 비슷한 형식
  데이터 간의 관계를 구성하는 데이터베이스
  노드(nodes)에 속성별(entities)로 데이터를 저장
  각 노드간 관계는 선(edge)으로 표현
  ex) 그래프 데이터베이스 : Neo4J, InfiniteGraph 

---------------------------------------------------------------------------------------------------
SQL 기반의 데이터베이스와 NoSQL 데이터베이스의 차이점

1. 데이터 저장(Storage)

- 관계형 데이터베이스는 SQL을 이용해서 데이터를 테이블에 저장
  ( 미리 작성된 스키마를 기반으로 정해진 형식에 맞게 데이터를 저장 )
- NoSQL은 key-value, document, wide-column, graph 등의 방식으로 데이터를 저장

2. 스키마(Schema)

- SQL을 사용하려면, 고정된 형식의 스키마가 필요
  ( 처리하려는 데이터 속성별로 열(column)에 대한 정보를 미리 지정)
  스키마는 나중에도 변경 가능 -> 이 경우 DB 전체 수정 or 오프라인(down-time)으로 전환해야 한다.
- NoSQL은 관계형 데이터베이스보다 동적으로 스키마의 형태 관리 가능 
  ( 행을 추가할 때 즉시 새로운 열을 추가할 수 있고, 개별 속성에 대해서 모든 열에 대한 데이터를 반드시 입력하지 않아도 된다)
 
3. 쿼리(Querying) : 쿼리는 데이터베이스에 대해서 정보를 요청하는 질의문

- 관계형 데이터베이스는 테이블의 형식과 테이블간의 관계에 맞춰 데이터를 요청
  ( 정보 요청 시 SQL과 같은 구조화된 쿼리 언어 사용)
- 비관계형 데이터베이스의 쿼리는 데이터 그룹 자체를 조회하는 것에 초점
  ( 구조화 되지 않은 쿼리 언어로도 데이터 요청이 가능, UnQL(UnStructured Query Language))

4. 확장성(Scalability)

- 일반적으로 SQL 기반의 관계형 데이터베이스는 수직적으로 확장
  ( 높은 메모리, CPU를 사용하는 확장 -> 비용이 많이 든다) 
  (여러 서버에 걸쳐서 데이터베이스의 관계를 정의할 수 있지만, 매우 복잡하고 시간이 많이 소모)
- NoSQL로 구성된 데이터베이스는 수평적으로 확장
  ( 보다 값싼 서버 증설, 또는 클라우드 서비스 이용하는 확장 ) 
  NoSQL 데이터베이스를 위한 서버를 추가적으로 구축하면, 많은 트래픽을 보다 편리하게 처리 가능
  저렴한 범용 하드웨어나 클라우드 기반의 인스턴스에 NoSQL 데이터베이스를 호스팅 가능 -> 수직적 확장보다 비용이 저렴

!) NoSQL 기반의 비관계형 데이터베이스가 확장성이나 속도면에서 더 뛰어나지만
고차원으로 구조화된 SQL 기반의 데이터베이스가 더 좋은 성능을 보여주는 서비스도 있다. 

---------------------------------------------------------------------------------------------------
SQL 기반의 관계형 데이터베이스를 사용하는 케이스

1. 데이터베이스의 ACID 성질을 준수해야 하는 경우
: 전자 상거래를 비롯한 모든 금융 서비스를 위한 소프트웨어 개발 에서는 반드시 데이터베이스의 ACID 성질을 준수
  SQL을 사용하면 데이터베이스와 상호 작용하는 방식을 정확하게 규정 가능
  데이터베이스에서 데이터를 처리할 때 발생할 수 있는 예외적인 상황을 줄이고, 데이터베이스의 무결성을 보호

2. 소프트웨어에 사용되는 데이터가 구조적이고 일관적인 경우
: 소프트웨어(프로젝트)의 규모가 많은 서버를 필요로 하지 않고 일관된 데이터를 사용하는 경우

+)  NoSQL 데이터베이스 : 다양한 데이터 유형과 높은 트래픽을 지원하도록 설계되었다. 
---------------------------------------------------------------------------------------------------
NoSQL 기반의 비관계형 데이터베이스를 사용하는 케이스

1. 데이터의 구조가 거의 또는 전혀 없는 대용량의 데이터를 저장하는 경우
: 대부분의 NoSQL 데이터베이스는 저장할 수 있는 데이터의 유형에 제한이 없다. 
  필요에 따라, 언제든지 데이터의 새 유형을 추가 가능
  -> 정형화 되지 않은 많은 양의 데이터가 필요한 경우, NoSQL을 적용하는 것이 더 효율적

2. 클라우드 컴퓨팅 및 저장공간을 최대한 활용하는 경우
: 클라우드 기반으로 데이터베이스 저장소를 구축하면, 저렴한 비용의 솔루션을 제공 가능 
  데이터베이스의 확장성이 중요하다면, 별다른 번거로움 없이 확장할 수 있는 NoSQL 데이터베이스를 사용

3. 빠르게 서비스를 구축하는 과정에서 데이터 구조를 자주 업데이트 하는 경우 ( 프로토타입 출시 )
: NoSQL 데이터베이스의 경우 스키마를 미리 준비할 필요가 없기 때문에 빠르게 개발하는 과정에 매우 유리
소프트웨어 버전별로 많은 다운타임 없이 데이터 구조를 자주 업데이트 해야하는 경우
스키마를 매번 수정해야 하는 관계형 데이터베이스 보다 NoSQL 기반의 비관계형 데이터베이스를 사용하는 게 더 적합

+) 다운타임: 데이터베이스 서버를 오프라인으로 전환하여 데이터 처리를 진행하는 작업 시간
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------