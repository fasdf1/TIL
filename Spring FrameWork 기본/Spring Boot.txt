===========================================================================================
Spring Framework은 엔터프라이즈 애플리케이션을 개발하기 위한 핵심 기능을 제공하는 Spring Project 중 하나
편리하지만 Spring 설정이 복잡함 

- Spring Boot란?
Spring FrameWork 설정의 복잡함을 해결하기 위해 생겨난 Spring Project 중 하나
------------------------------------------------------------------------------------------------------------------------------------------------

- Spring Boot를 사용하는 이유 
------------------------------------------------------------------------------------------------------------------------------------------------

1. XML 기반의 복잡한 설계 방식 지양
: Spring Boot 이전의 Spring 애플리케이션 개발을 위한 설정은 굉장히 복잡했다.
  Spring Boot를 사용하면 Spring의 복잡한 설정 작업마저도 Spring이 대신 처리해주기 때문에 
  개발자는 핵심 비지니스 로직에만 집중할 수 있다. 
------------------------------------------------------------------------------------------------------------------------------------------------
2. 의존 라이브러리의 자동 관리
: Spring Boot 이전에는 애플리케이션에서 필요한 라이브러리를 사용하기 위해서 필요한 라이브러리의 이름과 버전을 일일이 추가
  (라이브러리 간의 버전 불일치로 인한 빌드 및 실행 오류 역시 빈번하게 발생)
   -> Spring Boot를 사용하면 starter 모듈 구성 기능을 통해 의존 라이브러리를 수동으로 설정할 필요가 없어짐

    dependencies {
    	implementation 'org.springframework.boot:spring-boot-starter-web'
    	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    	implementation 'com.h2database:h2'
    }
   //  단 네 줄의 설정만으로 데이터베이스와의 연동은 물론 애플리케이션에 대한 모든 테스트까지 진행
------------------------------------------------------------------------------------------------------------------------------------------------
3. 애플리케이션 설정의 자동 구성
: Spring Boot에서 지원하는 자동 구성으로 인해 여러분들이 애플리케이션에 대한 설정을 직접해야하는 번거로움을 최소화

    	implementation 'org.springframework.boot:spring-boot-starter-web'
 	//애플리케이션이 웹 애플리케이션이라고 추측한 뒤, 웹 애플리케이션을 띄울 서블릿 컨테이너(디폴트: Tomcat) 설정을 자동으로 구성

    	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	//애플리케이션에 데이터베이스 연결이 필요하다고 추측한 뒤, JDBC 설정을 자동으로 구성

자동 구성을 활성화하려면 @SpringBootApplication 애너테이션을 Spring 애플리케이션 코드에 추가

------------------------------------------------------------------------------------------------------------------------------------------------
4. 프로덕션급 애플리케이션의 손쉬운 빌드
: Spring Boot을 사용하면 애플리케이션 구현 코드를 손쉽게 빌드하기 때문에
  직접 빌드 결과물을 War 파일 형태로 WAS(Web Application Server)에 올릴 필요가 없다. 

[bootJar] 명령을 더블 클릭하면 빌드 결과물이 생성 
[bootJar] 명령을 실행해서 생성된 jar 파일은 즉시 시작 가능한 애플리케이션 실행 파일로 사용

+) WAS(Web Application Server)란?
: 구현된 코드를 빌드해서 나온 결과물을 실제 웹 애플리케이션으로 실행되게 해주는 서버

+) Java 기반의 웹 애플리케이션을 배포하는 일반적인 방식은
개발자가 구현한 애플리케이션 코드를 WAR(Web application ARchive) 파일 형태로 빌드한 후에
 WAS(Java에서는 서블릿 컨테이너)라는 서버에 배포하고 해당 애플리케이션을 실행하는 것 

+) Java의 대표적인 WAS : Tomcat 

------------------------------------------------------------------------------------------------------------------------------------------------
5. 내장된 WAS를 통한 손쉬운 배포
:Spring Boot은 Apache Tomcat이라는 WAS를 내장하고 있기 때문에 별도의 WAS를 구축할 필요가 없다. 
 Spring Boot을 통해 빌드된 jar 파일을 이용해서 " java -jar 파일명.jar " 명령어를 입력해 서비스 가능한 웹 애플리케이션을 실행 가능
------------------------------------------------------------------------------------------------------------------------------------------------

- Spring Boot의 핵심 : Spring 구성은 Spring에게 맡기고비즈니스 로직에만 집중할 수 있다.

------------------------------------------------------------------------------------------------------------------------------------------------
+)  Spring Boot에서 사용할 수 있는 서블릿 컨테이너(WAS) 
: 


===========================================================================================