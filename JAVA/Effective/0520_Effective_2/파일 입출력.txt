--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
- 파일 입출력
InputStream, OutputStream

자바에서는 입출력을 다루기 위해  InputStream, OutputStream을 제공
스트림은 단방향으로만 데이터를 전송 -> 입력과 출력을 동시에 처리하기 위해서는 각각의 스트림이 필요
File 입출력 스트림은, 바이트 기반 스트림
바이트 기반 : 입출력 단위가 1byte

ex) 
- FileInputStream
// ABC.txt의 내용 : code
        try {
            FileInputStream InputFile = new FileInputStream("ABC.txt");
            int i = 0;
            while ((i = InputFile.read()) != -1) { //InputFile.read( )의 리턴값을 i에 저장한 후, 값이 -1인지 확인합니다.
                System.out.print((char)i);
            }
            fileInput.close();
        }
        catch (Exception e) {
            System.out.println(e);
--------------------------------------------------------------------------------------------------------------------------------------------
+) BufferedInputStream이라는 보조 스트림을 주로 사용( 성능 향상 ) 
   보조 스트림도 스트림의 하위 클래스이기 때문에 입출력방법은 같다.

ex)
FileInputStream InputFile = new FileInputStream("ABC.txt");
BufferedInputStream bufferedInput = new BufferedInputStream(fileInput);
while ((i = bufferedInput.read()) != -1) 

+) 버퍼 : 바이트 배열,
           여러 바이트를 저장하여 한 번에 많은 양의 데이터를 입출력할 수 있도록 도와주는 임시 저장 공간
--------------------------------------------------------------------------------------------------------------------------------------------

- FileOutputStream
        try {
            FileOutputStream fileOutput = new FileOutputStream("OutputTest.txt");
            String word = "Input String Value";

            byte b[] = word.getBytes();
            fileOutput.write(b);
            fileOutput.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }


-  InputStream과 OutputStream의 메서드
: https://docs.oracle.com/javase/7/docs/api/java/io/OutputStream.html

--------------------------------------------------------------------------------------------------------------------------------------------
- 문자 기반 스트림 : FileReader / FileWriter
File 입출력 스트림은 입출력 단위가 1byte 이지만 Java에서 char 타입은 2byte
-> 자바에서 문자 기반 스트림을 제공
문자 데이터를 다룰 때 사용
문자 기반 스트림과 그 하위 클래스는 여러 종류의 인코딩(encoding)과 자바에서 사용하는 유니코드(UTF-16)간의 자동 변환 수행
Reader에도 성능을 개선할 수 있는 BufferedReader가 있다. 


InputStream - Reader
OutputStream - Writer
FileReader는 인코딩을 유니코드로 변환
FileWriter는 유니코드를 인코딩으로 변환

- Reader : https://docs.oracle.com/javase/7/docs/api/java/io/Reader.html
- Writer : https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Writer.html
--------------------------------------------------------------------------------------------------------------------------------------------
- File

-  File 클래스
: 자바에서는 File 클래스로 파일과 디렉토리에 접근 가능 
파일이 존재하지 않더라도, 컴파일 에러가 발생하지는 않는다. 
!) File 클래스의 메서드
: https://docs.oracle.com/javase/7/docs/api/java/io/File.html

파일 인스턴스를 생성 != 파일 생성
- 파일 생성
파일 인스턴스를 생성할 때
첫 번째 인자에 경로를, 두 번째 인자에 파일명을 작성
createNewFile()메서드를 호출

File file1 = new File("./", "TestFile.txt");
file1.createNewFile();
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------