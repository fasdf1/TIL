----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
함수형 프로그래밍 :  병렬 처리와 이벤트 지향 프로그래밍에 적합
자바는 함수형 프로그래밍을 위해 람다식(Lambda Expressions)을 지원
----------------------------------------------------------------------------------------------------------------------------
람다식 : 익명 함수를 생성하기 위한 식
-> 코드 간결, 컬렉션의 요소를 필터링하거나 매핑해서 원하는 결과를 쉽게 집계

람다식의 형태는 매개변수를 가진 코드 블록이지만(함수 정의 형태), 
런타임에 인터페이스의 익명 구현 객체로 생성된다.

ex) Runnable 이라는 인터페이스의 익명 구현 객체를 생성
Runnable runnable = new Runnable() {
	public void run() { ... }
};

-> 람다식 표현
Runnable runnable = () -> { ... };
//  Runnable 타입의 참조 변수에 대입
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
- 람다식 기본 문법 

-> : 매개변수를 이용해서 중괄호 { } 실행블록을 실행한다
+) 매개변수의 타입은 런타임에 대입되는 값에 따라 자동으로 인식될 수 있기 때문에 
   람다식에서는 매개변수의 타입을 일반적으로 언급하지 않는다.
----------------------------------------------------------------------------------------------------------------------------
1. 기본 작성
(타입 매개변수) -> { ... }

타입 매개변수 : 실행문{...}에 필요한 값을 제공
----------------------------------------------------------------------------------------------------------------------------
2. 매개변수가 1개 일 때, 매개변수 ( ) 생략가능, 하나의 실행문만 있다면 중괄호도 생략이 가능
매개변수 -> { ... }  

----------------------------------------------------------------------------------------------------------------------------
3. 매개변수가 2개 이상이고, 리턴문만 존재할 때는 return을 생략가능
(매개변수1, 매개변수2) -> 리턴값;

(num1, num2) -> {return num1 + num2} 

(num1, num2) -> num1 + num2 // return 생략가능, 중괄호도 생략
----------------------------------------------------------------------------------------------------------------------------
4. 매개변수가 2개 이상이고, 실행문을 실행하고 결과값을 리턴할 경우
(매개변수1, 매개변수2) -> { ... };
----------------------------------------------------------------------------------------------------------------------------
5. 매개변수가 없는 경우
( ) -> {...}  //매개변수 자리가 사라짐을 방지하기 위해  ( )
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
- 함수형 인터페이스 = 단 하나의 추상 메서드만을 포함하는 인터페이스 

클래스에서 공통적으로 사용하는 기능이 있는 경우 클래스마다 메서드를 정의하는 것을 방지하기 위해 람다식을 사용
람다식은 인터페이스 문법을 활용해 표현된다. 
람다식은 하나의 메서드를 정의 -> 두 개의 추상 메서드가 선언된 인터페이스는 람다식 이용해 구현 객체 생성 불가 
----------------------------------------------------------------------------------------------------------------------------
- 타겟 타입과 함수형 인터페이스
하나의 추상 메서드가 선언된 인터페이스( 함수형 인터페이스(functional interface))만이 람다식의 타겟 타입
함수형 인터페이스 작성 시 두 개 이상의 추상 메서드가 선언되지 않도록 컴파일러가 체크해주는 기능 : @FunctionalInterface

@FunctionalInterface  //붙이는 것은 선택 사항
public interface TestFunctionalInterface {
    public void accept();
    //public void otheraccept();
    // -> Invalid '@FunctionalInterface' annotation; TestFunctionalInterface is not a functional interface
}
----------------------------------------------------------------------------------------------------------------------------
- 매개변수와 리턴값이 없는 람다식

<interface.java>

@FunctionalInterface 
public interface TestFunctionalInterface {
    public void accept();
}

<main>

//TestFunctionalInterface를 타겟 타입으로 하는 람다식 작성
//TestFunctionalInterface tfi1 = ( ) -> { ... };
//람다식이 대입된 참조변수 tfi1으로 accept호출 가능, accept호출은 람다식의 {...} 실행시킴

TestFunctionalInterface tfi1
tfi1 = () -> {
            String str = "Method 1";
            System.out.println(str);
        };
tfi1.accept();    //중괄호 안의 내용 실행

tfi1 = () -> System.out.println("Method 2");
//실행문이 하나라면 중괄호 { }는 생략 가능
example.accept();


----------------------------------------------------------------------------------------------------------------------------
- 리턴값이 없고 매개변수가 있는 람다식

<interface.java>

@FunctionalInterface 
public interface TestFunctionalInterface {
    public void accept();
}

<main>

//TestFunctionalInterface를 타겟 타입으로 하는 람다식 작성
//TestFunctionalInterface tfi1 = ( ) -> { ... };
//람다식이 대입된 참조변수 tfi1으로 accept호출 가능, accept호출은 람다식의 {...} 실행시킴

TestFunctionalInterface tfi1
tfi1 = () -> {
            String str = "Method 1";
            System.out.println(str);
        };
tfi1.accept();    //중괄호 안의 내용 실행

tfi1 = () -> System.out.println("Method 2");
//실행문이 하나라면 중괄호 { }는 생략 가능
example.accept();

----------------------------------------------------------------------------------------------------------------------------
- 매개변수와 리턴값이 있는 람다식

<interface.java>

@FunctionalInterface 
public interface TestFunctionalInterface {
    public void accept();
}

<main>

//TestFunctionalInterface를 타겟 타입으로 하는 람다식 작성
//TestFunctionalInterface tfi1 = ( ) -> { ... };
//람다식이 대입된 참조변수 tfi1으로 accept호출 가능, accept호출은 람다식의 {...} 실행시킴

TestFunctionalInterface tfi1
tfi1 = () -> {
            String str = "Method 1";
            System.out.println(str);
        };
tfi1.accept();    //중괄호 안의 내용 실행

tfi1 = () -> System.out.println("Method 2");
//실행문이 하나라면 중괄호 { }는 생략 가능
example.accept();

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
- 메서드 레퍼런스 
람다식에서 불필요한 매개변수를 제거하려는 목적으로 사용
람다식은 종종 기존 메서드를 단순히 호출만 하는 경우가 많다. 

ex)  Math 클래스 max( ) 정적 메서드 : 두 개의 값을 받아 큰 수를 리턴 
람다식 :  (left, right) -> Math.max(left, right);   // (매개변수) -> {실행문}
          람다식은 단순 값 전달 역할만 하기 때문에 부적절

!) 이 때 메서드 레퍼런스 사용
메서드 레퍼런스도 인터페이스의 익명 구현 객체로 생성된다. 
( 타겟 타입인 인터페이스의 추상 메서드의 매개 변수와 리턴 타입에 따라 달라짐)

메서드 레퍼런스 :  Math :: max; // 메서드 레퍼런스

ex) intBinaryOperator 인터페이스 : 두 개의 int값을 받아 int값 리턴 
intBinaryOperator ibo = Math :: max; 
----------------------------------------------------------------------------------------------------------------------------
메서드 레퍼런스는 정적 혹은 인스턴스 메서드를 참조할 수 있고 생성자 참조도 가능
----------------------------------------------------------------------------------------------------------------------------
1. 정적 메서드와 인스턴스 메서드 레퍼런스 

1-1. 정적 메서드 참조 
클래스명 :: 정적메서드명

1-2. 인스턴스 메서드 참조
객체 생성 시 참조변수 :: 인스턴스 메서드명 
----------------------------------------------------------------------------------------------------------------------------
2. 매개변수의 메서드 레퍼런스  
메서드는 람다식 외부의 클래스 멤버일 수도 있고, 람다식에서 제공되는 매개변수의 멤버일 수도 있다.
ex) 람다식에서 제공되는 a 매개변수의 메서드를 호출해서 b 매개변수를 매개값으로 사용

람다식 : (a,b) -> {a.instanceMethod(b);};
메서드 레퍼런스 : a클래스명 :: instanceMethod
// 작성방법은 정적 메서드 레퍼런스와 동일하지만 a의 인스턴스 메서드가 참조되므로 전혀 다른 코드가 실행
----------------------------------------------------------------------------------------------------------------------------
3. 생성자 참조
생성자를 참조한다는 것은 객체 생성을 의미
메서드 호출로 구성된 람다식을 메서드 레퍼런스로 대치 가능
->  객체를 생성하고 리턴하도록 구성된 람다식은 생성자 참조로 대치 가능

람다식 : (a,b) -> {return new 클래스(a,b);};
메서드 레퍼런스 : 클래스 :: new

!) 생성자가 오버로딩 되어 여러 개가 있을 경우 
   : 컴파일러는 함수형 인터페이스의 추상 메서드와 동일한 매개 변수 타입과 개수를 가지고 있는 생성자를 찾아 실행
!) 생성자가 존재하지 않으면 컴파일 오류
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------