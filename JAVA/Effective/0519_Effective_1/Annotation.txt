----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
- 애너테이션(Annotation)

주석과 애너테이션은 모두 소스 코드에 영향 X, 정보를 제공하기 위한 목적으로 사용
주석:  소스 코드를 읽는 사람에게 정보 제공
애너테이션: 프로그램에게 정보를 제공
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
- 애너테이션의 용도
1. 컴파일러에게 문법 에러를 체크하도록 정보 제공
2. 프로그램을 빌드할 때 코드를 자동으로 생성할 수 있도록 정보 제공
3. 런타임에 특정 기능을 실행하도록 정보 제공
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
- 애너테이션의 종류
----------------------------------------------------------------------------------------------------------------------------------
1. 표준 애너테이션
----------------------------------------------------------------------------------------------------------------------------------
1-1. @Override	
: 메서드 앞에만 붙일 수 있는 애너테이션
  선언한 메서드가 상위 클래스의 메서드를 오버라이딩하는 메서드라는 것을 컴파일러에게 알림
  상위 클래스(또는 인터페이스)에 선언한 메서드명과 동일한 메서드가 없으면 컴파일 에러 발생
  !) 애너테이션 없이 오버라이딩 시 메서드명을 잘못 작성해도 에러 발생하지 않는다. 
  ( 컴파일러는 새로운 이름의 메서드가 추가된 것으로 인식 )
  ex) 
  class Upper {
	void printValue() {}
  }
  class Lower extends Upper {
	void printVaule() {} .
  }
  // 이를 방지하기 위해 @Override를 사용 -> 컴파일 에러가 발생해 오타를 확인할 수 있다. 
----------------------------------------------------------------------------------------------------------------------------------

1-2. @Deprecated	: 앞으로 사용하지 않을 대상을 알릴 때 사용
: 더 이상 사용하지 않는 필드나 메서드가 생겼을 때, 해당 필드 및 메서드에 사용
  해당 메서드 및 필드를 더 이상 사용하지 않음을 표시
  ex)
  class UnusedClass {
	@Deprecated
	int UnusedField;

	@Deprecated
	int getUnusedField() { return UnusedField; };
  }  
-> @Depreacated가 붙은 대상을 사용하면 아래와 같은 에러 발생 
Note: 파일명.java uses or overrides a deprecated API.
Note: Recomplie with -Xlint:deprecation for details.
----------------------------------------------------------------------------------------------------------------------------------

1-3. @FunctionalInterface 
: 함수형 인터페이스를 선언할 때, 올바르게 선언했는지 확인해준다. 
 실수를 방지하기 위한 확인용 애너테이션
 함수형 인터페이스는 하나의 추상메서드만 있어야 하는데 추상메서드가 2개 이상인 경우 에러를 발생

ex) 
@FunctionalInterface
public interface CheckValue {
	public abstract void printValue ();
}

----------------------------------------------------------------------------------------------------------------------------------

1-4. @SuppressWarning 
: 컴파일러가 선언한 곳의 컴파일 경고메세지를 나타내지 않도록 한다. 
@SuppressWarings(”all”)	            모든 경고를 억제
@SuppressWarings(”deprecation”)	Deprecated 메서드를 사용한 경우 나오는 경고 억제
@SuppressWarings(”fallthrough”)	switch문에서 break 구문이 없을 때 경고 억제
@SuppressWarings(”finally”)	            finally 관련 경고 억제
@SuppressWarings(”null”)	            null 관련 경고 억제
@SuppressWarings(”uncheched”)	검증되지 않은 연산자 관련 경고 억제
@SuppressWarings(”unused”)	사용하지 않는 코드 관련 경고 억제

----------------------------------------------------------------------------------------------------------------------------------
2. 메타 애너테이션   
: 애너테이션에 붙이는 애너테이션
  애너테이션의 정의(애너테이션의 적용 대상이나 유지 기간)하는 데 사용
---------------------------------------------------------------------------------------------------------------------------------- 
2-1. @Target
: 애너테이션을 정의할 때 적용 대상을 지정하는데 사용한다.  //애너테이션의 적용 범위 지정 
  
----------------------------------------------------------------------------------------------------------------------------------
2-2. @Documented	
: 애너테이션 정보를 javadoc으로 작성된 문서에 포함시킨다. 

----------------------------------------------------------------------------------------------------------------------------------
2-3. @Inherited	
: 하위 클래스가 애너테이션을 상속받도록  한다.

----------------------------------------------------------------------------------------------------------------------------------
2-4. @Retention	
:애너테이션이 유지되는 기간을 정하는데 사용한다.

----------------------------------------------------------------------------------------------------------------------------------
2-5. @Repeatable	
: 애너테이션을 반복해서 적용할 수 있게 한다.

----------------------------------------------------------------------------------------------------------------------------------
3. 사용자 정의 애너테이션 
: 사용자가 직접 정의하는 애너테이션
애너테이션은 java.lang.annotation 인터페이스를 상속받는다 -> 다른 클래스나 인터페이스를 상속받을 수 X 

@interface 애너테이션명 { // 인터페이스 앞에 @기호만 붙이면 애너테이션을 정의할 수 있습니다. 
	타입 요소명(); // 애너테이션 요소를 선언
}
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------