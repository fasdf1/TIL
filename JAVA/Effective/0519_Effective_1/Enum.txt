---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
- 열거형(enumerated type)  
서로 관련이 있는 것들을 모아서 그것들에 번호를 매겨놓은 것
서로 연관된 상수들의 집합
---------------------------------------------------------------------------------------------------------------------------------------
- 열거형 정의
enum 열거형이름 { 상수명1, 상수명2, 상수명3, ...}

enum Major { MATHEMATICS, PHYSICS, ELETRONICS , CHEMISTRY }
// 상수는 대소문자 모두 작성 가능하지만 관례적으로 대문자로 작성합니다.
// 열거 상수는 객체 
---------------------------------------------------------------------------------------------------------------------------------------
- enum에 정의된 상수 참조는 클래스의 static 변수 참조 방식과 동일
-> 열거형이름.상수명으로 참조

enum Major { MATHEMATICS, PHYSICS, ELETRONICS , CHEMISTRY }

public class EnumTest {
    public static void main(String[ ] args){
         System.out.println(Major.PHYSICS);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
- Major.PHYSICS를 Major 타입의 변수에 할당할 수 있다. 

enum Major { MATHEMATICS, PHYSICS, ELETRONICS , CHEMISTRY }

public class EnumTest {
    public static void main(String[ ] args){
         Major m1 = Major.PHYSICS;
         System.out.println(m1);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
- 열거 타입은 몇 가지로 한정된 값을 가지고 사용하는 데이터 타입 -> 경우를 나눠야 할 때 많이 사용

enum Grade {
  A,
  B,
  C
}

public class Main {
  public static void main(String[] args) {
    Grade grade = Grade.C;

    switch(grade) {
      case A:
        System.out.println("GOOD");
        break;
      case B:
         System.out.println("NORMAL");
        break;
      case C:
        System.out.println("BAD");
        break;
    }
  }
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
- public static final의 문제점

enum이 등장하기 전에는 여러 상수를 정의해서 사용하기 위해서 public static final을 통해 전역변수로 상수를 설정
하지만 상수명이 중복되어 컴파일 에러가 발생하는 경우가 발생 
---------------------------------------------------------------------------------------------------------------------------------------
-> 1. 인터페이스를 활용해 해결
interface Literature { 
	int STORY= 1, CHARACTERS= 2, MOTIF = 3, THEME= 4;
}

interface Building {
	int STORY= 1, WALL = 2, ROOF = 3, GROUND = 4;
}
// 중복 상수명의 문제는 해결되지만 타입 안정성에 문제 발생
(각 STORY는 의미가 달라 비교할 수 없는 개념이지만 if문을 통해 이 둘의 값을 비교할 수 있다. )
ex) if(Literature.STORY == Building.STORY) { ... } 
---------------------------------------------------------------------------------------------------------------------------------------
-> 2. 타입 비교를 불가능하게 하기 위해 객체로 만든다. 

class Literature {
    public static final Literature STORY = new Literature();
    public static final Literature CHARACTERS = new Literature();
    public static final Literature MOTIF = new Literature();
    public static final Literature THEME = new Literature();
}

class Building {
    public static final Building STORY  = new Building();
    public static final Building WALL  = new Building();
    public static final Building ROOF = new Building();
    public static final Building GROUND  = new Building();
}

// 서로 다른 개념 간 상수명 중복과 타입 안정성 문제 해결
// 하지만 사용자 정의 타입이기 때문에 switch문에 사용할 수 없음

switch문에서 사용 시 
:호환되지 않는 타입입니다. Founbd: 'Seasons', required: 'char, byte,
short, int, Character, Byte, Short, Integer, String 또는 enum'
---------------------------------------------------------------------------------------------------------------------------------------
--> enum을 이용해 상수 정의 

enum Major {MATHEMATICS, PHYSICS, ELETRONICS , CHEMISTRY}

public class UseEnum {
    public static void main(String[] args) {
        Major seasons2 = Major.PHYSICS;
        switch (seasons2) {
            case MATHEMATICS:
                System.out.println("수학과");
                break;
            case PHYSICS:
                System.out.println("물리학과");
                break;
            case ELETRONICS:
                System.out.println("전자과");
                break;
            case CHEMISTRY:
                System.out.println("화학과");
                break;
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
!) enum의 장점

1. 타입에 대한 안정성 보장
2. 중복 상수명 사용 가능
3. 가독성 좋음
4. switch문에서 사용 가능 