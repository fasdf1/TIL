- 다형성(Polymorphism)
: 하나의 객체가 여러 가지 형태를 가질 수 있는 것

- 다형성의 장점
코드의 중복 제거 -> 편리하고 효과적인 프로그래밍
ex) 메서드 오버라이딩, 메서드 오버로딩 

//instanceOfExample.java에 정리
---------------------------------------------------------------------------------------------------------------------------------------------

- 자바에서 다형성은 한 타입의 참조변수를 통해 여러 타입의 객체를 참조할 수 있도록 만든 것
  (상위 클래스 타입의 참조변수를 통해서 하위 클래스의 객체를 참조할 수 있도록 허용한 것)

- 상위 클래스 타입의 참조변수를 통해 하위 클래스 타입의 객체를 참조할 수 있다. 
  (upcasting), 캐스팅 연산자( ) 쓸 필요 X

- 구현 객체가 상위 클래스 타입으로 변환되는 것 = 자동 타입 변환

!) 참조변수가 사용할 수 있는 멤버의 개수는 실제 객체의 멤버 개수보다 같거나 적어야한다
  (상위 클래스 멤버의 개수는 하위클래스 타입의 멤버보다 같거나 적다)

ex) 타이어 클래스 - 한국 타이어 클래스(타이어 상속) / 금호 타이어 클래스(타이어 상속)  : "상속 관계"

public class Car {
	Tire frontLeftTire = new HankookTire( );
	Tire frontRightTire = new HankookTire( );
	Tire backLeftTire = new HankookTire( );	
	Tire bakcRightTire = new HankookTire( );
}      
---------------------------------------------------------------------------------------------------------------------------------------------
- car 객체를 생성한 후, 초기값으로 대입한 구현 객체 대신 다른 구현 객체를 대입할 수도 있다.

Car myCar = new Car( );
myCar.frontLeftTire = new KumhoTire( );
myCar.backLeftTire = new KumhoTire( );

---------------------------------------------------------------------------------------------------------------------------------------------
- 하지만 하위 클래스 타입의 참조변수를 통해 상위 클래스 타입의 객체를 참조할 수는 없다. 
( 하위 클래스 타입의 멤버의 개수는 상위 클래스 타입의 멤버의 개수보다 같거나 많기 때문에 ) // 상위로 갈수록 추상적

ex)
class Human {};
class Kim extends Humanl{};
class Lee extends Human{};

public class InstanceOfTest {
    public static void main(String[] args) {
        Human human = new Human( );
        Human Lee= new Lee();  //Lee -> Human upcasting

    }
}

!) Lee h1 = new Human( );   [X]
-> 하위 클래스 타입인 Lee의 참조변수 개수는 상위 클래스 Human 객체보다 같거나 크기 때문에 불가능 
->  개수 안 맞음 : 하위 클래스에 추가로 있는 멤버를 상위 클래스의 멤버에 포함시킬 수 없다
---------------------------------------------------------------------------------------------------------------------------------------------
- 상위 클래스 타입으로 참조된 하위 클래스 객체의 메서드를 사용할 수 없다.  

ex)
Vehicle vehicle = new Bus( );
vehicle.run( );  // 가능
vehicle.checkFare( ); //불가능 , 상위 클래스 타입과 하위 클래스 타입에 공통적으로 존재하는 것만 사용이 가능


!) 하위 클래스 타입의 메서드 : checkFare( )
[상위 클래스 타입] 참조변수 = new [하위 클래스 타입]( ) ;
참조변수.checkFare( ); [ X ]
->상위 클래스에 checkFare 메서드가 없으므로 사용불가

=========================================================================
---------------------------------------------------------------------------------------------------------------------------------------------
- 하위 클래스 타입의 필드와 메소드를 사용해야 하는 경우  
-> 캐스팅 연산자를 통해 상위 클래스 타입으로 강제형변환을 해야 한다. 이 때 캐스팅 연산자를 반드시 명시해줘야 한다. 

Vehicle vehicle = new Bus( ); // 강제 타입 변환은 하위 클래스 객체가 상위 클래스 타입으로 변환되어 있는 상태에서 가능하다.
Bus bus = (Bus) vehicle; // 강제 타입변환
bus.run( );
bus.checkFare( ); //가능
---------------------------------------------------------------------------------------------------------------------------------------------
- 참조변수의 타입 변환
참조 변수도 타입변환이 가능(사용할 수 있는 멤버의 개수를 조절하는 것)

- 타입 변환의 조건
1. 서로  '상속 관계' 에 있는 클래스 사이에서만 타입 변환이 가능
2. 업캐스팅 ( 하위 클래스 타입 -> 상위 클래스 타입으로 타입 변환)일 때는 형변환 연산자(괄호) 생략 가능
3. 다운캐스팅( 상위 클래스 타입 -> 하위 클래스 타입으로 타입 변환)일 때는 형변환 연산자 반드시 명시

상위로 가는 건 안정적, 생략 가능, 부모는 포용 가능
하위로 가는 건 (기능 늘어남)은 위험 , ( ) 생략 불가능 , 자식은 포용 불가

---------------------------------------------------------------------------------------------------------------------------------------------
이 때 '어떤 구현 객체'가 상위 클래스 타입으로 변환되어 있는지 알 수 없는 상태에서
무작정 변환하면 ClassCastException이 발생할 수도 있으므로 instanceOf 연산자를 통해 구현 객체를 확인해줘야 한다. 

ex) Vehicle vehicle = new Taxi( );
     Bus bus = (bus) vehicle;  // vehicle 참조변수에 들어가있는 객체는 Taxi 타입의 객체

: Taxi 객체가 Vehicle 인터페이스로 변환되어 있을 경우, 
  Bus 타입으로 강제 타입 변환하면 
  구현 클래스 타입이 다르므로 ClassCastException이 발생

-> 어떤 구현 객체가 상위 클래스 타입으로 변환되어있는지 확인하기 위해 instanceOf 연산자를 사용한다. 
=========================================================================
---------------------------------------------------------------------------------------------------------------------------------------------
-강제 타입 변환은 구현 객체가 상위 클래스 타입으로 변환되어 있는 상태에서 가능하다. 
  어떠한 구현 객체가 변환되어 있는지 알 수 없는 상태에서 무작정 변환하면 ClassCastException이 발생할 수도 있다

ex) Vehicle vehicle = new Taxi;
    Bus bus = (bus) vehicle;
Taxi 객체가 Vehicle 인터페이스로 변환되어 있을 경우, 
Bus 타입으로 강제 타입 변환하면 구현 클래스 타입이 다르므로 ClassCastException이 발생

-> 어떤 구현 객체가 상위 클래스 타입으로 변환되어있는지 확인하기 위해 instanceOf 연산자를 사용한다. 
---------------------------------------------------------------------------------------------------------------------------------------------
- instanceof 연산자 
캐스팅(참조변수의 타입 변환)이 가능한 지 여부를 boolean 타입으로 확인
캐스팅 가능 여부: 객체의 생성자, 클래스 사이의 상속 관계 존재 유무

참조_변수 instanceof 타입
-> true: 참조변수가 검사한 타입으로 타입 변환이 가능하다
-> false : 타입 변환이 불가능하다
만약 참조변수가 null인 경우 ->  false를 반환한다. 

ex) 

class Human {};
class Kim extends Humanl{};
class Lee extends Human{};

public class InstanceOfTest {
    public static void main(String[] args) {
        Human human = new Human( );
        System.out.println(human instanceof Object); //true
        System.out.println(human instanceof Human); //true
        System.out.println(human instanceof Kim); //false 

        Human Lee= new Lee();
        System.out.println(Lee instanceof Object); //true
        System.out.println(Lee instanceof Human); //true
        System.out.println(Lee instanceof Lee); //true
        System.out.println(Lee instanceof Kim); //false
    }
}

!) Human human = new Human( );

System.out.println(human instanceof Object); //true
System.out.println(human instanceof Kim); //false 

상위 클래스인 Human 타입으로 변환된 객체 human이 Object인가?  : true
상위 클래스인 Human 타입으로 변환된 객체 human이 Kimt인가?  : false  

!) Human Lee= new Lee();  //Lee 객체가 상위 클래스인 Human 타입으로 변환되어 있다.

System.out.println(Lee instanceof Object); //true
System.out.println(Lee instanceof Human); //true
System.out.println(Lee instanceof Lee); //true
System.out.println(Lee instanceof Kim); //false

상위 클래스인 Human 타입으로 변환되어 있는 객체 Lee가 Object인가?  : true
상위 클래스인 Human 타입으로 변환되어 있는 객체 Lee이 Human인가?  : true  
상위 클래스인 Human 타입으로 변환되어 있는 객체 Lee가 Lee인가?  : true
상위 클래스인 Human 타입으로 변환되어 있는 객체 Lee이 Kim인가?  : false  
---------------------------------------------------------------------------------------------------------------------------------------------
!) instanceOf는 해당 클래스가 자기 집이 맞는지 확인하는 것

1. parent instanceof Parent : 부모가 본인집을 찾았으니 true
2. child instanceof Parent : 자식이 상속받은 부모집을 찾았으니 true (상속을 받았으니 자식의 집)
3. parent instanceof Child : 부모가 자식집을 찾았으니 false (자식집은 자식집이지 부모집은 아니니까)
4. child instanceof Child : 자식이 본인집을 찾았으니 true

// 출처: https://mine-it-record.tistory.com/120 [나만의 기록들]