----------------------------------------------------------------------------------
생성자(Constructor)
----------------------------------------------------------------------------------
객체를 생성하는 역할을 하는 클래스의 구성 요소
인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드
new 키워드를 사용하여 객체를 생성할 때에 호출되는 것이 사실 바로 이 생성자
!) 생성자가 인스턴스를 생성하는 역할을 하는 것이 아니다.
인스턴스 생성을 담당하는 것은 new 키워드이며,
생성자는 인스턴스 변수들을 초기화하는데 사용되는 특수한 메서드 

- 생성자 vs 메서드

1. 생성자의 이름은 반드시 클래스의 이름과 같아야 한다.
2. 생성자는 리턴 타입이 없지만 void 키워드를 사용하지 않는다
(무언가를 리턴하지 않는다를 의미하는 void와는 다르게
생성자는 아예 리턴 타입 자체가 존재하지 않기 때문)


클래스명(매개변수) { // 생성자 기본 구조
	...생략...
}

+) 생성자도 오버로딩 가능하므로 한 클래스 내에
   여러 개의 생성자가 존재할 수 있다. 

public class ConstructorTest {
    public static void main(String[] args) {
        Constructor ct1 = new Constructor();
        Constructor ct2 = new Constructor("Hello World");
        Constructor ct3 = new Constructor(5,10);
    }
}

class Constructor {
    Constructor() { // (1) 생성자 오버로딩
        System.out.println("1번 생성자");
    }

    Constructor(String str) { // (2) 
        System.out.println("2번 생성자");
    }

    Constructor(int a, int b) { // (3) 
        System.out.println("3번 생성자");
    }
}
----------------------------------------------------------------------------------
기본 생성자 vs 매개변수가 있는 생성자

----------------------------------------------------------------------------------
- 기본 생성자(Default Constructor)
모든 클래스에는 반드시 하나 이상의 생성자가 존재해야 한다.

+)생성자를 따로 만들지 않아도 정상적으로 인스턴스를 만들 수 있었던 이유
: 자바 컴파일러가 기본 생성자를 자동으로 추가해줬기 때문

클래스명(){} //기본 생성자
DefaultConst(){} // 예시) DefaultConst 클래스의 기본 생성자

+) 생성자가 이미 추가되어있는 경우 기본생성자가 아닌 추가된 생성자를 기본으로 사용

- 매개변수가 있는 생성자
매개변수가 있는 생성자는 메서드처럼 매개변수를 통해 호출 시에 해당 값을 받아 인스턴스를 초기화하는 데 사용
유한 특성을 가진 인스턴스를 계속 만들어야하는 경우 인스턴스마다 각기 다른 값을 가지고 초기화할 수 있어서 매우 유용
매개변수가 있는 생성자를 사용하게되면 인스턴스를 만든 후에 인스턴스의 필드값을 일일이 설정해줄 필요없이
생성과 동시에 원하는 값으로 설정해줄 수 있어서 굉장히 편리

 매개변수가 있는 경우에는 그 개수와 타입에 알맞게 생성자를 호출
----------------------------------------------------------------------------------
this vs this( )

----------------------------------------------------------------------------------
- this( )

같은 클래스 안에 메서드들끼리 서로 호출할 수 있었던 것처럼 생성자도 상호 호출이 가능
이를 위해 사용하는 것이 바로 this() 메서드
 this() 메서드는 자신이 속한 클래스에서 다른 생성자를 호출하는 경우에 사용
ex) 클래스명이 Car이라는 car 클래스의 생성자를 호출
     Car( ) : X == this( ) : O 

문법 요소
this() 메서드는 반드시 생성자의 내부에서만 사용할 수 있습니다
this() 메서드는 반드시 생성자의 첫 줄에 위치해야 합니다

ex)
public class Test {
    public static void main(String[] args) {
        Constructor example = new Example();
        Constructor example2 = new Example(10);
    }
}

class Constructor {
    public Constructor () {
        System.out.println("Example1의 기본 생성자 호출!");
    };

    public Example(int a) {
        this( );
        System.out.println("Example2의 생성자 호출!");
    }
}

//Output
Example1의 기본 생성자 호출!
Example1의 기본 생성자 호출!
Example2의 생성자 호출!

- this 키워드 
ex) 
public class CarTest {
    public static void main(String[] args) {
        Car lincoln = new Car("lincoln", "검은색", 5000);
        System.out.println("제 차는 " + car.getModelName() + "이고, 색깔은 " +  car.getColor() + "입니다.");
    }
}

class Car {
    private String modelName;
    private String color;
    private int price;
    //인스턴스 변수 3개

    public Car(String modelName, String color, int price) {
        //괄호 안 매개변수 3개 
        this.modelName = modelName;
        this.color = color;
        this.price = price;
    }
   //인스턴스 변수와 매개변수를 구분해주기 위한 용도로 주로 사용하는 키워드 this
   만약 this.modelName = modelName이 아니라
   modelName = modelName으로 작성하면 둘 다 지역변수로 간주된다.


    public String getModelName() {
        return modelName;
    }

    public String getColor() {
        return color;
    }
}
//Output
제 차는 lincoln이고, 컬러는 검은색입니다.

+) 모든 메서드에는 자신이 포함된 클래스의 객체를 가리키는 this라는 참조변수가 있는데,
일반적인 경우에는 컴파일러가 this.를 추가해주기 때문에 생략하는 경우가 많다.

ex) Car 클래스의 modelName이라는 인스턴스 필드를 클래스 내부에 출력하고자 한다
원래는 System.out.println(this.modelName) 이런 방식으로 작성해주어야 한다.

-> this는 인스턴스 자신을 가리키며
참조변수를 통해 인스턴스의 멤버에 접근할 수 있는 것처럼 
this를 통해서 인스턴스 자신의 변수에 접근할 수 있는 것
주로 인스턴스의 필드명과 지역변수를 구분하기 위한 용도로 사용
