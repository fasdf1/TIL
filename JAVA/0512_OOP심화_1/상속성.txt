- 상속(Inheritance)

: 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 자바의 문법 요소
  상위 클래스의 멤버(필드, 메서드, 이너 클래스)를 하위 클래스에게 내려주는 것
  하위 클래스는 상위 클래스가 가진 모든 멤버를 상속 받는다. 
  ~클래스로부터 확장되었다라는 의미가 적합 
---------------------------------------------------------------------------------------------------
- 상속을 사용하는 이유
: 코드를 재사용하기 때문에 적은 코드로 새로운 클래스를 작성할 수 있다. (코드의 중복 제거)
  다형적 표현이 가능하다. 

+) 다형성 : 하나의 객체가 여러 모양으로 표현될 수 있다. 
  ex) 컴퓨터는 기계다. 
       컴퓨터는 전자장치다. 
---------------------------------------------------------------------------------------------------
- 상속 방법
: extends 키워드를 사용
  Class 하위클래스 extends 상위 클래스명 {
  
  }

!) 객체지향 프로그래밍 언어 : C++, JAVA
   C++에서는 여러 상위 클래스로부터 상속이 가능한 다중 상속을 허용하지만 
   자바에서는 다중 상속이 허용되지 않습니다.
---------------------------------------------------------------------------------------------------
- 포함 관계 (Composite)
상속처럼 클래스를 재사용할 수 있는 방법
클래스의 멤버로 다른 클래스 타입의 참조변수를 선언하는 것

ex) AcademicRecord 로 studentId와 grade를 묶어주고, Student 클래스 안에
    참조변수를 선언 -> 코드의 중복을 없애고 포함관계로 재사용

public class Student {
    int age;
    String name;
    AcademicRecord ar;

    public Student (int age, String name, AcademicRecord ar) {
        this.age = age;
        this.name = name;
        this.ar = ar;
    }

    void showInfo() {
        System.out.println(age + " " +name);
        System.out.println(ar.studentId+ " " + ar.grade);
    }

    public static void main(String[] args) {
        AcademicRecord ar1 = new AcademicRecord("202212345", 1);
        AcademicRecord ar2 = new AcademicRecord("201878940", 3);

        Student s1 = new Student (20, "김철수", ar1);
        Student s2 = new Student (22, "박민수", ar2);

        s1.showInfo();
        s2.showInfo();
    }
}

class AcademicRecord { //학적
    String studentId;  //학번
    int grade;  //학년

    public AcademicRecord (String studentId, int grade) {
        this.studentId = studentId;
        this.grade = grade;
    }
}

/*
Output
20 김철수
202212345 1
22 박민수
201878940 3
*/
---------------------------------------------------------------------------------------------------

!) 상속 관계 vs 포함 관계 구분

상속 :   ‘~은 ~이다(IS-A)’ 관계
포함 :   ~은 ~을 가지고 있다(HAS-A) 관계

---------------------------------------------------------------------------------------------------
- 메서드 오버라이딩
상위 클래스로부터 상속받은 메서드와 동일한 이름의 메서드를 재정의하는 것

ex) 메서드 오버라이딩
class Machine {
    void operate() {
        System.out.println("machine is operating");
    }
}

public class Computer extends Machine { // Vehicle 클래스 상속
    void operate() {
        System.out.println("Computer is operating"); // 메서드 오버라이딩
}

    public static void main(String[] args) {
        Computer c1 = new Computer();
        c1.operate();
    }
}

//Output
"Computer is operating"
---------------------------------------------------------------------------------------------------
!) 오버라이딩할 때는 세 가지 조건을 만족해야 한다. 
메서드의 선언부(메서드 이름, 매개변수, 반환타입)이 상위클래스의 메서드 선언부와 완전히 일치해야한다.
접근 제어자의 범위가 상위 클래스의 메서드보다 같거나 넓어야 한다.
예외는 상위 클래스의 메서드보다 많이 선언할 수 없다.
---------------------------------------------------------------------------------------------------
!) 메서드 오버라이딩을 사용하는 이유?
ex) 상위 클래스 타입으로 선언해 객체를 사용할 수 있다

public class OverridngTest {
    public static void main(String[] args) {
        Speaker sp1 = new Speaker(); // 각각의 타입으로 선언 + 각각의 타입으로 객체 생성
        Phone p1 = new Phone();
        Computer c1 = new Computer();

        sp1.operate();
        p1.operate();
        c1.operate();

        Machine sp2 = new Speaker(); // 상위 클래스 타입으로 선언 + 각각 타입으로 객체 생성
        Machine p2 = new Phone();
        Machine c2 = new Computer();

        sp2.operate();
        p2.operate();
        c2.operate();
    }
}

class Machine {
    void operate() {
        System.out.println("machine is operating");
    }
}

class Speaker extends Machine { // Vehicle 클래스 상속
    void operate() {
        System.out.println("Speaker is operating"); // 메서드 오버라이딩////
    }
}

class Phone extends Machine { // Vehicle 클래스 상속
    void operate() {
        System.out.println("Phone is operating"); // 메서드 오버라이딩
    }
}

class Computer extends Machine { // Vehicle 클래스 상속
    void operate() {
        System.out.println("Computer is operating"); // 메서드 오버라이딩
    }
}

/*
Output
Speaker is operating
Phone is operating
Computer is operating
Speaker is operating
Phone is operating
Computer is operating

1. 세 개의 클래스가 Machine 클래스로부터 상속을 받아 operate( ) 에서드를
    자신의 방식대로 오버라이딩
    각 객체의 operate 메서드 실행 시 각 객체에 해당하는 operate 메서드 실행 
2. 다형적 표현 사용
   각 객체를 사용, 객체 모두를 상위 클래스 타입으로 선언 
   operate 메서드 실행 시 모두 상위 클래스 타입이지만 메서드 오버라이딩을 통해
   각각의 operate 메서드가 다른 출력값을 보여준다. 

-> 모든 객체를 상위 클래스 타입 하나로 선언하면 배열을 통해 관리하기 편리하다.
*/
---------------------------------------------------------------------------------------------------
ex) 배열로 한번에 관리하기
Machine[] machines = new Machine[] { new Speaker(), new Phone(), new Computer()};
        for (Machine machine : machines) {
		machine.operate();
        }

Machine 타입의 machines라는 이름의 배열 생성 
배열의 요소로 각 객체를 생성

for each문
-> 
    machines 배열에서 꺼낸 항목을 저장할 Machine 타입의 객체 machine
    루프를 돌릴 machines 배열
    machines 배열에서 한 개씩 순차적으로 machine 객체에 대입되어 for문이 수행
    루프마다 operate 메서드 실행 


???) for문을 빠져나오면 machine 객체가 사라지는 거 아닌가??? 
---------------------------------------------------------------------------------------------------
- super 키워드와 super( )
super 키워드는 상위 클래스의 객체, super()는 상위 클래스의 생성자를 의미
---------------------------------------------------------------------------------------------------
- super
ex) 하위 클래스는 상위 클래스로부터 같은 이름의 인스턴스 변수를 상속받는다.
    같은 이름의 인스턴스 변수를 구분하기 위해 super 키워드를 사용한다. 
    자바 컴파일러는 자신이 속한 인스턴스 객체의 멤버를 먼저 참조한다. 
    super 키워드를 사용하면 부모 객체의 멤버값을 참조할 수있다. 

public class Super {
    public static void main(String[] args) {
        LowerClass lc = new LowerClass();
        lc.printMember();
    }
}

class UpperClass {
    String member = "상위 member"; // super.member
}

class LowerClass extends UpperClass {
    String member = "하위 member"; // this.member

    void printMember() {
        System.out.println("member = " + member);
        System.out.println("this.meber = " + this.member);
        System.out.println("super.meber = " + super.member);
    }
}

//Output
member = 하위 member
this.member = 하위 member
super.member = 상위 member


---------------------------------------------------------------------------------------------------
- super( )

ex) 
public class SuperConstructor {
    public static void main(String[] args) {
        Hyundai hyundai1 = new Hyundai();
        Hyundai hyundai2 = new Hyundai("Grandeur");
        System.out.println("hyundai2 객체의 모델명은 " + hyundai2.modelName + "입니다");
    }
}

class Car {
    Car() {
        System.out.println("Car 클래스 생성자");
    }
}

class Hyundai extends Car { // Car 클래스로부터 상속
    String modelName;
    /*
   모든 생성자의 첫 줄에는 반드시 this() 또는 super()가 선언되어야 한다
    */
    Hyundai() {
        //super(); // Car 클래스의 생성자 호출, 주석 처리해도 자동 삽입된다.
        // 상위 클래스의 기본 생성자가 없으면 하위 클래스의 생성자 쪽에서 에러 발생
        System.out.println("Hyundai 클래스 생성자");
    }
    Hyundai(String modelName){
        this();
        this.modelName = modelName;
        System.out.println("modelName을 받은 Hyundai 클래스 생성자");
        //this() 메서드는 자신이 속한 클래스에서 기본 생성자 외에 다른 생성자를 호출하는 경우에 사용
        //this() 메서드는 반드시 생성자의 내부에서만 사용할 수 있습니다
        //this() 메서드는 반드시 생성자의 첫 줄에 위치해야 합니다
    }
}

!) 모든 생성자의 첫 줄에는 반드시 this() 또는 super()가 선언되어야 한다
  만약 super()가 없는 경우에는 컴파일러가 생성자의 첫 줄에 자동으로 super()를 삽입
  이때 상위클래스에 기본생성자가 없으면 에러가 발생
  클래스를 만들 때는 자동으로 기본 생성자를 생성하는 것을 습관화
---------------------------------------------------------------------------------------------------
- 클래스의 정점, Object 클래스
Object 클래스는 자바의 클래스 상속계층도에서 최상위에 위치한 상위클래스
자바의 모든 클래스는 Object 클래스를 상속받는다
(자바 컴파일러는 다른 클래스로부터 아무런 상속을 받지 않는 클래스에 자동적으로 extends Object를 추가하여 Object 클래스를 상속받도록 한다)

ex)
class UpperClass { // extends Object 자동 추가된다 

}

class LowerClass extends UpperClass {

}
---------------------------------------------------------------------------------------------------
- Object 클래스의 메서드 : 따로 정의하지 않고도 사용가능하다

메서드명	             반환 타입	 동작
toString() 	 String	             객체 정보를 문자열로 출력
equals(Object obj)	 boolean	             등가 비교 연산(==)과 동일하게 스택 메모리값을 비교
hashCode()	 int	             객체의 위치정보 관련. Hashtable 또는 HashMap에서 동일 객체여부 판단
wait()	             void	             현재 쓰레드 일시정지
notify()	             void	             일시정지 중인 쓰레드 재동작
---------------------------------------------------------------------------------------------------