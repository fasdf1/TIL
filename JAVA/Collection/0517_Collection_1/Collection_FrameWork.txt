자료 구조를 바탕으로 객체들을 효율적으로 추가, 삭제, 검색할 수 있도록 컬렉션을 만들고, 
관련된 인터페이스와 클래스를 포함시킨 것을 컬렉션 프레임워크라고 한다. 

- Java 컬렉션 프레임워크 구조

List와 Set은 공통점이 많기 때문에 이들의 공통된 메서드만 모아 컬렉션 인터페이스로 정의되어 있다
Map은 사용법이 달라 독립된 인터페이스로 분리되어 있다. 
--------------------------------------------------------------------------------------------------------------------------------------------------------
인터페이스	특징								구현 클래스
--------------------------------------------------------------------------------------------------------------------------------------------------------
List		순서를 유지하고 저장, 중복저장 가능					ArrayList, Vector, Stack, LinkedList 등
Set		순서를 유지하지 않고 저장, 중복저장 불가능				HashSet, TreeSet 등
Map		키(key)와 값(value)의 쌍으로 저장, 순서 유지하지 않음, 키는 중복저장 불가	HashMap, Hashtable, TreeMap, Properties 등
--------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
- List<E>
객체를 일렬로 늘어놓은 구조 
객체 저장 시 자동으로 부여되는 인덱스를 통해 객체 관리( 인덱스로 객체 검색/삭제 ) 
List 인터페이스에서 공통적으로 사용 가능한 메서드 외에 컬렉션 인터페이스의 메서드도 상속 받아 사용 가능하다. 
List 인터페이스를 구현한 클래스 : ArrayList, Vector, LinkedList, Stack 등
------------------------------------------------------------------------------------------------------------------------------------------------------------
1. ArrayList
: 기능적으로 Vector와 동일, Vector 개선한 것 
ArrayList에 객체를 추가하면 객체가 인덱스로 관리된다. 
!) 배열과 유사하지만 생성될 때 크기가 고정되는 배열과 달리 ArrayList는 저장 용량을 초과한 객체들이 들어오면 자동으로 저장용량이 늘어난다. 
리스트 계열의 특성을 이어받았기 때문에 데이터가 연속적으로 존재한다. 

1-1. ArrayList 생성 
: 저장할 객체 타입을 제네릭(타입 파라미터)로 표기하고 기본 생성자 호출

List<타입 파라미터> 객체명 = new ArrayList<타입 파라미터>(초기 저장용량);

List<String> container1 = new ArrayList<String>();
//String타입의 객체를 저장하는 ArrayList, 초기 용량은 10개의 객체 저장가능.

List<Integer> container2 = new ArrayList<Integer>(30);
//용량의 크기를 매개값으로 받아 ArrayList 객체 생성

ArrayList에 객체를 추가하면 인덱스 0부터 차례대로 저장된다.
특정 인덱스의 객체를 제거하면 나머지 인덱스들이 모두 1씩 앞으로 당겨진다. 
-> ArrayList는 객체 삭제와 삽입이 빈번한 경우에 부적절하다.

1-2. ArrayList 객체 추가/검색/삭제

public class ArrayListTest {
	public static void main(String[] args) {
		ArrayList<String> listExample = new ArrayList<String>();

		listExample.add("Hello"); // String 객체 저장/추가
		listExample.add("World");
		listExample.add("JAVA");

		int listSize = listExample.size(); // 저장된 총 객체 수 얻기
		String zeroIndexValue = listExample.get(0); // 0번 인덱스의 객체 얻기

		for(int i = 0; i < listSize; i++){// 저장된 총 객체 수 만큼 조회
			String str = listExample.get(i);
			System.out.println(i + ":" + str);
		}

		listExample.remove(0); // 0번 인덱스 객체 삭제
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
2. LinkedList
데이터를 효율적으로 추가, 삭제, 변경하기 위해 사용
데이터가 불연속적으로 존재하고, 데이터들은 서로 연결되어 있다. 
LinkedList의 각 요소(node)들은 자신과 연결된 요소의 주소값과 데이터로 구성

데이터 추가 : 새로운 요소를 추가하고자 하는 위치의 이전 요소와 다음 요소 사이에 연결 
( 이전 요소가 새로운 요소를 참조, 새로운 요소가 다음 요소를 참조) 
데이터 삭제 : 링크를 끊어준다. 
( 삭제하려는 요소의 이전 요소가 삭제하려는 요소의 다음 요소를 참조하도록 변경) 
-> 처리 속도가 빠르다 

!) ArrayList와 차이 
ArrayList에서는 데이터 추가/삭제 시 다른 데이터를 복사해서 이동해야 한다. 
중간에 위치한 객체에 대한 추가/삭제 시 데이터 이동이 많이 발생해 속도가 저하된다. 
하지만 인덱스를 활용하기 때문에 검색(읽기)에는 유리 

LinkedList는 데이터 추가/삭제 시 참조만 변경하기 때문에 ArrayList에 비해 빠르다. 
하지만 검색은 노드를 처음부터 순회하기 때문에 부적절

-> 데이터의 잦은 변경 : LinkedList, 데이터의 개수가 변하지 않는다: ArrayList 
------------------------------------------------------------------------------------------------------------------------------------------------------------
- Iterator
자바의 컬렉션 프레임워크에서는 '컬렉션'에 저장된 요소를 읽어오는 방법을 Iterator 인터페이스로 표준화
Iterator 인터페이스를 구현한 클래스의 인스턴스를 반환하는 iterator() 메서드를 정의하여 각 요소에 접근
Collection 인터페이스를 상속받는 List와 Set 인터페이스에서도 iterator() 메서드를 사용 가능

1. Iterator 인터페이스에 선언된 메서드 
 hasNext() : 가져올 객체가 있으면 true를 리턴하고, 없으면 false를 리턴한다. true가 리턴되면 next( ) 메서드 사용
 next() : 컬렉션에서 하나의 객체를 가져온다 , 사용 전 먼저 가져올 객체가 있는지 확인
 remove() : 컬렉션에서 객체를 제거한다 

2.  List에서 String 객체들 하나씩 가져오기 

ex1) Iterator 사용
ArrayList<String> listExample = new ArrayList<String>();
Iterator<String> iterator = listSample.iterator();

while(iterator.hasNext()) {  //가져올 객체가 있는 동안은, 괄호 안의 내용이 true이면
	String str = iterator.next();
		   //객체 하나를 가져옴
}

ex2) 향상된 for문 사용 
ArrayList<String> listExample = new ArrayList<String>();
for(String str : listSample) {
	// 저장된 객체 수만큼 반복한다.
}

3. next( )메서드로 가져온 객체 제거 : remove( )메서드 호출 

ex)
ArrayList<String> listExample = new ArrayList<String>();

while(iterator.hasNext()){ //다음 객체가 있다면
	String str = iterator.next(); //객체를 가져오고,
	if(str.equals("str과 같은 단어")){ //가져온 객체와 비교
		iterator.remove(); //해당 객체 제거
	}
}
//Iterator의 메서드이지만, 실제 해당 컬렉션에서 객체가 제거된다. 
+) 한 번 사용된 Iterator 객체는 재사용이 불가능하다. 
------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
- Set <E>  //집합
요소의 중복을 허용하지 않고, 저장 순서를 유지하지 않는다. 
Set을 구현한 대표적인 클래스에는 HashSet, TreeSet
1. HashSet

ex)
public class HashsetTest {

    public static void main(String[] args) {
        HashSet<String > Books = new HashSet<String>();

       Books.add("이것이 자바다");
       Books.add("열혈 C프로그래밍");
       Books.add("최신 디지털 공학");
       Books.add("공업수학의 기초");
       Books.add("이것이 자바다");

        Iterator it = Books.iterator();

        while(it.hasNext()) {
            System.out.println(it.next());
        }
    }
}
// 입력한 순서대로 출력되지 않고, 중복 요소는 한 번만 저장된다. 

2. TreeSet
이진 탐색 트리 형태로 데이터를 저장 
중복 저장 허용하지 않고, 저장순서 유지되지 않는다. 

2-1. 이진 탐색 트리(Binary Search Tree)
하나의 부모 노드가 최대 두 개의 자식 노드와 연결되는 이진 트리의 일종 
정렬과 검색에 특화된 자료 구조
최상위 노드 : 루트 
이진 탐색 트리의 특징 : 모든 왼쪽 자식의 값이 루트나 부모보다 작고, 모든 오른쪽 자식의 값이 루트나 부모보다 크다.

ex)
import java.util.TreeSet;

public class TreeSetTest {
    public static void main(String[] args) {
        TreeSet<String> students = new TreeSet<>();

        students.add("Lee Gonghak");
        students.add("Park soohak");
        students.add("Kim minsu");

        System.out.println(students);
        System.out.println(students.first());
        System.out.println(students.last());
        System.out.println(students.higher("Lee"));
        System.out.println(students.subSet("Kim", "Park"));
    }
}
//기본 정렬이 오름차순

- Comparator와 Comparable
컬렉션을 정렬하기 위해 제공되는 자바 인터페이스 

1) Comparable은 비교 대상(매개 변수)과 자기 자신을 비교
: Comparable 인터페이스는 compareTo() 메서드를 사용해 객체를 정렬, 기본정렬은 오름차순 
  비교하는 두 객체가 같으면 0, 비교할 객체가 주어진 객체보다 작으면 음수, 크면 양수를 반환

import java.util.*;

class Student implements Comparable<Student>{
    int studentId;
    String name,major;

    public Student(int studentId, String name, String major) {
        this.studentId = studentId;
        this.name = name;
        this.major = major;
    }

    @Override //오버라이딩을 강제하기 위한 애너테이션입니다.
    public int compareTo(Student student) {
        if(studentId > student.studentId) {
            return 1;
        } else if(studentId < student.studentId){
            return -1;
        } else {
            return 0;
        }
    }
}

public class ComparableTest {
    public static void main(String[] args) {
        Set<Student> students = new TreeSet<>();

        Student student1 = new Student(11,"Kim Coding","컴퓨터공학과");
        Student student2 = new Student(5,"Lee Math","수학과");
        Student student3 = new Student(7,"Park Circuit","전자과");

        students.add(student1);
        students.add(student2);
        students.add(student3);

        for(Student student:students){
            System.out.println(student.id+" "+student.name+" "+student.department+" ");
        }
    }
}
//데이터를 삽입한 순서와 무관하게, compareTo 메서드에서 정의해준 대로 정렬되어 출력

2) Comparator는 매개 변수인 두 객체를 비교
기본 정렬 기준이 아닌 다른 기준으로 정렬하고 싶을 때 사용
compare() 메소드를 재정의(오버라이딩)
정렬할 때에는 반드시 매개변수로 정렬 기준을 제공하거나, 대상 객체에 자체적으로 정렬 기준이 구현되어 있어야 한다.

package CollectionFrameWork;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Student2 {
    int studentId;
    String name,major;

    public Student2(int studentId, String name, String major) {
        this.studentId = studentId;
        this.name = name;
        this.major = major;
    }
}
class SortbyStudentID implements Comparator<Student2> {
    @Override //오버라이딩을 강제하기 위한 애너테이션입니다.
    public int compare(Student2 student1, Student2 student2){
        return student1.studentId - student2.studentId;
    }
}


class ComparatorTest {
    public static void main(String[] args) {
        ArrayList<Student2> students = new ArrayList<>();

        Student2 student1 = new Student2(11,"Kim Coding","컴퓨터공학과");
        Student2 student2 = new Student2(5,"Lee Math","수학과");
        Student2 student3 = new Student2(7,"Park Circuit","전자과");

        students.add(student1);
        students.add(student2);
        students.add(student3);

        for(Student2 student:students){
            System.out.println(student.studentId+" "+student.name+" "+student.major+" ");
        }
        Collections.sort(students, new SortbyStudentID( ));

        for(Student2 student:students){
            System.out.println(student.studentId+" "+student.name+" "+student.major+" ");
        }

    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
Map <K,V>

키(key)와 값(value)으로 구성된 Entry 객체를 저장하는 구조
키는 중복 저장될 수 없지만, 값은 중복 저장이 가능
기존에 저장된 키와 동일한 키로 값을 저장하면, 기존의 값은 없어지고 새로운 값으로 대치
key와 value는 모두 객체, 기본 타입일 수 없다. 
key값이 다르면 값이 같아도 다른 entry로 간주한다. 

Map은 키(key)로 객체들을 관리하기 때문에 키를 매개값으로 갖는 메서드가 다수
Map 인터페이스를 구현한 클래스에는 HashMap, Hashtable, TreeMap, SortedMap 등

- HashMap 
해시 함수를 통해 '키'와 '값'이 저장되는 위치를 결정
-> 사용자는 그 위치를 알 수 없고, 삽입되는 순서와 위치 또한 관계가 없다.
HashMap의 키로 사용할 객체는 hashCode()와 equals() 메서드를 재정의해서 동등 객체(동일한 키)가 될 조건을 정해야 한다. 
조건은 HashSet과 동일 
: hashCode()의 리턴값이 같아야 하고, equals() 메서드가 true를 리턴해야 한다. 

해싱(Hashing)을 사용하기 때문에 많은 양의 데이터를 검색하는 데 용이
키 타입은 String을 많이 사용
문자열이 같을 경우 동등 객체가 될 수 있도록, hashcode()와 equals() 메서드가 재정의 되어 있다. 

HashMap 생성
: 파라미터(키 타입, 값 타입)를 주고 기본 생성자 호출 
Map<Key, Value> map = new HashMap<Key, Value>();
Map<Key, Value> map = new HashMap<Key, Value>(capacity, loadFactor);

!) 키와 값의 타입은 기본 타입(byte, short, int, float, double, boolean, char) 사용 불가
                         클래스 및 인터페이스 타입만 가능
!) HashMap은 키(key)와 값(value)에 null 값을 허용하지만, Hashtable은 null 값을 허용하지 않는다.

ex) String 타입의 키, Integer 타입의 값을 사용하는 HashMap

public class MapTest {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();

        //객체 저장
        map.put("김철수", 95);
        map.put("박민수", 65);
        map.put("김영희", 75);
        map.put("최민섭", 55);
        map.put("박호영", 20);

        //저장된 총 Entry 수 얻기
        System.out.println("총 entry 수: " + map.size());

        //객체 찾기
        System.out.println("김철수의 점수 : " + map.get("김철수"));
				//이름(key)로 점수(value)검색
        System.out.println("///");

        //객체를 하나씩 처리
        // Map은 키와 값을 쌍으로 저장하기 때문에 iterator() 를 직접 호출할 수 없다. 
       //  -> keySet( )이나 entrySet( ) 메서드를 이용해 Set형태로 반환된 컬렉션에 iterator( )를 호출해야 한다. 

        Set<String> keySet = map.keySet(); //Set 컬렉션으로 이름(key) 얻기

        //반복해서 이름(key)를 얻고, 값을 Map에서 얻어냄
        Iterator<String> keyIterator = keySet.iterator();
        while(keyIterator.hasNext()) {
            String key = keyIterator.next();
            Integer value = map.get(key);
            System.out.println(key + " : " + value);
        }

        //객체 삭제
        map.remove("박호영");
        System.out.println("///");

        System.out.println("총 entry 수: " + map.size());

        //객체를 하나씩 처리
        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();
        //Set 컬렉션으로 Map.Entry 얻기
        Iterator<Map.Entry<String, Integer>> entryIterator = entrySet.iterator();

        //반복해서 Map.Entry를 얻고 키와 값을 얻어냄
        while(entryIterator.hasNext()) {
            Map.Entry<String, Integer> entry = entryIterator.next();
            String key = entry.getKey();
            Integer value = entry.getValue();
            System.out.println(key + " : " + value);
        }

        //객체 전체 삭제
        map.clear();
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------



