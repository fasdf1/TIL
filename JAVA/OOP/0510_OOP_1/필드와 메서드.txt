-----------------------------------------------------------------------------------------------------------------------------

- 자바에서 변수는 크게 3가지로 구분된다.
: 클래스 변수(cv, class variable), 인스턴스 변수(iv, instance variable), 지역 변수(lv, local variable)

필드:  클래스 변수, 인스턴스 변수, 이 둘은 다시 static 키워드의 유무로 구분
(static 키워드가 함께 선언된 것은 클래스 변수, 그렇지 않은 것은 인스턴스 변수
지역변수: 위 두 가지 변수 유형에 포함되지 않고 메서드 내에 포함된 모든 변수

-> 선언된 위치에 따라 그 종류가 결정되며 각각 다른 유효 범위(scope)를 가지게 된다.
-----------------------------------------------------------------------------------------------------------------------------
- 필드(Field)
‘클래스에 포함된 변수'를 의미하는 것으로 객체의 속성을 정의할 때 사용한다. 

class Test { // => 클래스 영역
	int instanceVariable; // 인스턴스 변수
	static int classVariable; // 클래스 변수(static 변수, 공유변수)

	void method() { // => 메서드 영역
		int localVariable = 0; // 지역 변수. {}블록 안에서만 유효
	}

instanceVariable 과 classVariable 은 클래스 영역에 선언되었기 때문에 멤버 변수
클래스 변수: static 키워드가 있는 classVariable 변수
인스턴스 변수: stati 키워드가 없는 instanceVariable 변수
지역 변수: 메서드 내부의 블럭에 선언되어있는 지역변수 localVariable

+) 필드를 선언할 때는 접근 지정자, 필드의 타입, 필드의 이름 세가지를 정해줘야 한다. 
   접근 지정자에는 public과 private가 있으며, public은 모든 클래스로 부터 접근 가능, private는 클래스 내부에서만 접근이 가능하며 
   이 외에는 접근이 불가능하다.[3]
- 필드 변수-
-----------------------------------------------------------------------------------------------------------------------------
- 클래스 변수
독립적인 저장 공간을 가지는 인스턴스 변수와 다르게 ★공통된 저장공간을 공유★
한 클래스로부터 생성되는 모든 인스턴스들이 특정한 값을 공유해야하는 경우에 주로 static 키워드를 사용하여 클래스 변수를 선언
ex) 사람: 모든 사람이 공유하는 특성(손가락과 발가락 개수)을 저장

!)인스턴스 변수와 달리 인스턴스를 따로 생성하지 않고도 언제라도 클래스명.클래스변수명 을 통해 사용이 가능
-> Test.classVarible = 10; 

- 인스턴스 변수
: 인스턴스가 가지는 각각의 고유한 속성을 저장하기 위한 변수로 new 생성자( ) 를 통해 인스턴스가 생성될 때 만들어진다.
 클래스를 통해 만들어진 인스턴스는 ★힙 메모리의 독립적인 공간★에 저장되고, 
 동일한 클래스로부터 생성되었지만 객체의 고유한 개별성을 가진다.
 사람마다 성별, 이름, 나이가 다르듯 인스턴스 변수는 그 고유한 특성을 정의하기 위한 용도로 사용됩니다.
-----------------------------------------------------------------------------------------------------------------------------
- 지역변수 -
메서드 내에 선언되며 메서드 내 블록에서만 사용가능한 변수
★스택 메모리★에 저장되어 메서드가 종료되는 것과 동시에 함께 소멸되어 더이상 사용할 수 없게 됩니다
!) 메모리에 저장되는 필드 변수는 객체가 없어지지 않는 한 절대로 삭제되는 않는 반면에
스택 메모리에 저장되는 지역변수는 한동안 사용하지 않는 경우 가상 머신에 의해 자동으로 삭제됩니다.
-----------------------------------------------------------------------------------------------------------------------------
- 필드 변수와 지역 변수의 주요한 한 가지 차이점: 초기값
: 필드의 경우 다른 지역변수들과 다르게 초기화를 하지 않아도 기본값이 자동으로 초기화 된다는 특징을 가지고 있다

- 자동으로 가지게 되는 초기값
-----------------------------------------------------------------------------------------------------------------------------
정수타입	
byte	: 0
char	: \u0000(빈 공백)
short	: 0
int	: 0
long	: oL

실수타입	
float	: 0.0F
double	: 0.0

논리타입	
boolean	: false

참조타입	
배열, 클래스 (String 포함), 인터페이스 : null
-----------------------------------------------------------------------------------------------------------------------------
지역 변수: 직접 초기화하지 않으면 값을 출력할 때에 오류가 발생
필드 변수: 직접적으로 초기화를 실행하지 않더라도 강제로 초기화가 이뤄진다.

!) 힙 메모리에는 빈 공간이 저장될 수 없기 때문에 이곳에 저장되는 필드는 강제로 초기화되지만,
  스택 메모리는 강제로 초기화되지 않으므로 지역 변수는 선언시 반드시 초기화를 실행해주어야 한다.

-----------------------------------------------------------------------------------------------------------------------------
- static 키워드
static은 클래스의 멤버(필드, 메서드, 이너 클래스)에 사용하는 키워드
정적 멤버(static member) : static 키워드가 붙어있는 멤버
static이 붙어있지 않은 인스턴스 변수와 구분합니다.
!) 인스턴스 멤버는 객체를 생성한 이후에 변수와 메서드에 접근하여 해당 멤버를 사용가능한 반면
   static 키워드로 정의되어 있는 클래스 멤버들은 인스턴스의 생성 없이도 클래스명.멤버명 만으로도 사용이 가능

클래스명.멤버명 
new 키워드를 통해 생성된 인스턴스는 힙 메모리에 생성되고 독립적인 저장공간을 가지게 된다.
반면 static 키워드로 선언된 정적 멤버는 클래스 내부에 저장 공간을 가지고 있기 때문에 객체 생성 없이 곧바로 사용할 수 있다.

정적 필드는 객체 각 공유 변수의 성질이 있다. 메서도에서도 동일하게 적용
메서드 앞에 static 키워드를 사용하면 해당 메서드는 정적 메서드가 되고
정적 메서드는 정적 필드와 마찬가지로 클래스명만으로 바로 접근이 가능하다.
 !) 정적 메서드의 경우 인스턴스 변수나 인스턴스 메서드를 사용할 수 없다.
   ( 정적 메서드는 인스턴스 생성 없이 호출이 가능하기 때문에 정적 메서드가 호출되었을 때
     인스턴스가 존재하지 않을 수 있기 때문)

-> static 키워드를 사용하면 모든 인스턴스에 공통적으로 적용되는 값을 공유할 수 있다. 

static 키워드는 클래스의 멤버 앞에 붙일 수 있습니다
정적 멤버의 가장 큰 특징은 인스턴스를 따로 생성하지 않아도 클래스명만으로도 변수나 메서드 호출이 가능
이는 메모리의 저장위치와 관련이 있다

-----------------------------------------------------------------------------------------------------------------------------
- 메서드(Method)
특정 작업을 수행하는 일련의 명령문들의 집합
클래스의 기능에 해당하는 내용들을 담당
메서드 시그니처(method signature)와 몸통에 해당하는 메서드 바디(method body)로 구분

자바제어자 반환타입 메서드명(매개 변수) { // 메서드 시그니처
	메서드 내용 // 메서드 바디
}

해당 메서드가 어떤 타입을 반환하는 가(반환 타입),
메서드 이름이 무엇(메서드명)이며
해당 작업을 수행하기 위해서 어떤 재료들이 필요하는 지(매개 변수)에 대한 정보
메서드의 바디는 해당 메서드가 호출되었을 때 수행되어야하는 일련의 작업들을 표시

!) 메서드명은 관례적으로 소문자로 표시

ex)
public static int add(int x, int y) { // 메서드 시그니처
	int result = x + y; // 메서드 바디
	return result;
}
!) 만약 메서드의 반환타입이 void가 아닌 경우에는 메서드 바디({} )안에 반드시 return 문이 존재해야 합니다
리턴문은 작업을 수행한 결과값을 호출한 메서드로 전달
결과값은 반드시 반환타입과 일치하거나 적어도 자동 형변환이 가능한 것

ex)
void printHello() { // 반환타입이 void인 메서드
	System.out.println("hello!");
}
반환 타입이 void, 즉 반환 값이 없는 메서드를 의미
hello 출력 후 종료

ex)
int getNumSeven() { // 매개변수가 없는 메서드
	return 7;
}

int 타입의 결과값을 반환하는 매개변수가 없는 메서드,  숫자 7을 반환

ex)
Double multiply(int x, double y) { // 매개변수가 있는 메서드
	double result = x * y;
	return result;
}
 int와 double형을 산술 연산하면 범위가 더 큰 타입으로 자동으로 형 변환

- 메서드의 호출
메서드도 클래스의 멤버이므로 클래스 외부에서 메서드를 사용하기 위해서는 먼저 인스턴스를 생성해야합니다
포인트 연산자(.)를 통해 메서드를 호출할 수 있습니다
!) 클래스 내부에 있는 메서드끼리는 따로 객체를 생성하지 않고도 서로를 호출할 수 있습니다.

메서드이름(매개변수1, 매개변수2, ...); // 메서드 호출방법. 매개 변수가 없을 수도 있음.
메서드 호출 시 괄호() 안에 넣어주는 입력 값을 우리는 ‘인자(argument)’라고 하는데,
인자의 개수와 순서는 반드시 메서드를 정의할 때 선언된 매개변수와 일치되어야 합니다
인자의 타입 또한 매개변수의 그것과 일치하거나 자동 형변환이 가능한 것이어야 합니다.

-----------------------------------------------------------------------------------------------------------------------------
메서드 오버로딩(Method Overloading)
하나의 클래스 안에 같은 이름의 메서드를 여러 개 정의하는 것을 의미
메서드 시그니처는 각 메서드를 구분하는 용도로 사용
+) 자바 가상머신은  메서드의 이름 또는 매개변수의 타입이 다르면 다른 메서드라고 인식

!) 오버로딩이 성립하기 위해서는 크게 두 가지 조건이 성립해야 한다.
1. 같은 이름의 메서드명
2. 매개변수의 개수나 타입이 다르게 정의 
-> 조건 하나라도 충족되지 않으면 중복 정의로 간주되어 에러 발생
+) 반환 타입은 오버로딩이 성립하는 데 영향을 주지 못한다. 

- 오버로딩의 장점 
하나의 메서드로 여러 경우의 수를 해결할 수 있다
ex) println :  내부를 살펴보면 매개변수의 타입에 따라서 호출되는 println 메서드가 달라진다
같은 기능을 하는 메서드의 이름을 계속 반복적으로 지어주지 않아도 된다.
 이름만 보고도 기능을 쉽게 예측할 수 있습니다
-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------