
===============================================================================================
AOP는 애스펙트를 사용하여 다양한 기능들을 분리
애플리케이션을 바라보는 관점을 하나 하나의 기능 → 횡단 관심사(cross-cutting concerns) 관점으로 보는 것
AOP는 기존에 사용하던 OOP를 대체하기 위한 것이 아닌 횡단 관심사를 깔끔하게 처리하기 위해 OOP의 부족한 부분을 보조하는 목적으로 개발
-----------------------------------------------------------------------------------------------------------------------------------------------------
애스펙트(Aspect) : 관점 
부가 기능과 해당 부가 기능을 어디에 적용할지 정의한 것
분리한 부가 기능과 그 기능들을 어디에 적용할지 선택하는 기능을 합해서 하나의 모듈로 만든 것

핵심 기능(Core Concerns) : 업무 로직을 포함하는 기능
부가 기능(CROSS-CUTTING CONCERNS) : 핵심 기능을 도와주는 부가적인 기능
		                           로깅, 보안, 트랜잭션 등
Aspect : 부가 기능을 정의한 코드인 어드바이스(Advice)와 어드바이스를 어디에 적용할지 결정하는 포인트컷(PointCut)을 합친 개념
           (Advice + PointCut ⇒ Aspect)
===============================================================================================

< AOP가 필요한 이유 >
-----------------------------------------------------------------------------------------------------------------------------------------------------
- 객체 지향 프로그래밍(Object Oriented Programming:OOP)
: 정의된 기능들을 재사용하기 위해 동작보다는 객체를 중심으로 프로그래밍
  공통된 목적을 띈 데이터와 동작을 묶어 하나의 객체로 정의하는 것
  객체를 적극적으로 활용함으로써 기능을 재사용할 수 있는 것이 큰 장점
  객체를 잘 활용하기 위해선 관심사 분리 (Separation of Concerns, SoC)의 디자인 원칙을 준수해야 함
  OOP의 모듈화의 핵심 단위는 클래스

+) Spring MVC 구조는 @Controller, @Service, @Repository와 같이 관심사 별로 계층을 나눠 객체를 관리
   관심사의 분리는 모듈화의 핵심

- OOP의 문제점 
: 특정 관심사 업무 코드에 업무와는 관련이 없지만 애플리케이션에 필수적인 부가 기능인 트랜잭션, 보안, 로깅 등의 코드가 존재하게 된다. 
  트랜잭션, 보안, 로깅 기능은 불특정 다수의 클래스에서 존재
 관심사 관점에서 트랜잭션, 보안, 로깅 코드들을 횡단 관심사(Cross-cutting Concerns: 부가 기능)
                      업무 관련 코드는 핵심 관심사(Core Concerns: 핵심 기능)
 비즈니스 클래스에 횡단 관심사와 핵심 관리사가 공존
 ->  메소드 복잡도 증가 → 비즈니스 코드 파악 어려움
 ->  부가 기능의 불특정 다수 메소드가 반복적으로 구현 → 횡단 관심사의 모듈화 어려움
-----------------------------------------------------------------------------------------------------------------------------------------------------

- AOP의 등장
: OOP의 관심사 분리에 대한 한계적인 부분을 해결하고자 AOP가 등장
  관심 지향 프로그래밍(AOP)은 OOP 방식의 불필요한 반복을 해결하기 위한 방법

- AOP란? 
: AOP(Aspect-Oriented Programming)는 기존과 다른 프로그램 구조 사고 방식을 제공함으로써 객체 지향 프로그래밍(OOP)의 부족한 부분을 보완
  AOP의 모듈화의 핵심 단위는 관점
  Aspect는 여러 유형과 객체 간에 발생하는 문제 (ex - 트랜잭션)의 모듈화 가능
-----------------------------------------------------------------------------------------------------------------------------------------------------
- AOP의 핵심 기능과 부가 기능

1. 핵심 기능(Core Concerns)
   : 객체가 제공하는 고유의 기능(업무 로직 등을 포함)

2. 부가 기능(CROSS-CUTTING CONCERNS)
   : 핵심 기능을 보조하기 위해 제공되는 기능( 로그 추적 로직, 보안, 트랜잭션 기능 등)
     단독으로 사용되지 않고 핵심 기능(특정 로직)과 함께 사용 -> 하나의 객체로 들어가며 서비스 실행 시 핵심 기능과 부가 기능이 함께 실행된다. 

- 여러 곳에서 공통으로 사용하는 부가 기능
: 부가 기능은 보통 여러 클래스에 걸쳐서 함께 사용되며 이러한 부가 기능은 횡단 관심사가 된다. 
  부가 기능을 여러 곳에 적용하려면 번거롭고 중복 코드가 생기게 된다. 
  부가 기능을 수정하려면 사용되는 모든 클래스를 찾아가며 수정해야 한다. 

-> 소프트웨어 개발에서 변경 지점은 하나가 될 수 있도록 모듈화가 잘 이루어져야 한다. 
   부가 기능처럼 특정 로직을 애플리케이션 전반에 적용하는 문제는 일반적인 OOP 방식으로는 해결이 어렵기 때문에
   부가 기능을 분리하는 AOP 방식이 적절하다. 
===============================================================================================

< AOP 용어>

-----------------------------------------------------------------------------------------------------------------------------------------------------
1. 애스팩트(Aspect)
: 여러 객체에 공통으로 적용되는 기능 ( 공통 기능 )
  어드바이스 + 포인트컷을 모듈화하여 애플리케이션에 포함되는 횡단 기능
  여러 어드바이스와 포인트컷이 함께 존재 
-----------------------------------------------------------------------------------------------------------------------------------------------------
2. 조인 포인트 ( Join point)
: 클래스 초기화, 객체 인스턴스화, 메소드 호출, 필드 접근, 예외 발생과 같은 애플리케이션 실행 흐름에서의 특정 포인트를 의미
  애플리케이션에 새로운 동작을 추가하기 위해 조인포인트에 관심 코드(aspect code) 추가 가능
  횡단 관심은 조인포인트 전/후에 AOP에 의해 자동으로 추가
  추상적인 개념으로 AOP를 적용할 수 있는 모든 지점
  스프링 AOP는 프록시 방식을 사용하기 때문에 이 때의 조인 포인트는 항상 메소드 실행 지점으로 제한된다. 
  어드바이스 적용이 필요한 곳은 애플리케이션 내에 메서드를 갖는다. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
3. 어드바이스 (Advice) 
: 조인포인트에서 수행되는 코드를 의미
  Aspect를 언제 핵심 코드에 적용할 지를 정의
  시스템 전체 애스펙트에 API 호출을 제공
  메소드를 호출하기 전에 각 상세 정보와 모든 메소드를 로그로 남기기 위해서 메소드 시작 전의 포인트를 선택한다.
  부가 기능에 해당
-----------------------------------------------------------------------------------------------------------------------------------------------------
4. 포인트컷(PointCut)
: 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능
  AspectJ 표현식을 사용해서 지정
  프록시를 사용하는 스프링 AOP는 메서드 실행 지점만 포인트컷으로 선별 가능
-----------------------------------------------------------------------------------------------------------------------------------------------------
5. 위빙(Weaving)
: Advice를 핵심 코드에 적용하는 것
 ( 포인트컷으로 결정한 타겟의 조인 포인트에 어드바이스를 적용 )
 핵심 기능 코드에 영향을 주지 않고 부가 기능 추가 가능 
  AOP 적용을 위해 애스펙트 객체에 연결한 상태
  - 컴파일 타임(AspectJ compoiler)
  - 로드 타임
  - 런타임, 스프링 AOP는 런타임, 프록시 방식
-----------------------------------------------------------------------------------------------------------------------------------------------------
6. AOP 프록시(proxy)
: AOP 기능을 구현하기 위해 만든 프록시 객체
 스프링에서 AOP 프록시는 JDK 동적 프록시 또는 CGLIB 프록시
-----------------------------------------------------------------------------------------------------------------------------------------------------
7. 타겟 (Target)
: 핵심 기능을 담고 있는 모듈로 타겟은 부가기능을 부여할 대상이 된다. 
  Adivce를 받는 객체이고 포인트컷으로 결정
-----------------------------------------------------------------------------------------------------------------------------------------------------
8. 어드바이저(Advisor)
: 하나의 어드바이스와 하나의 포인트 컷으로 구성
  스프링 AOP에서만 사용되는 특별한 용어
-----------------------------------------------------------------------------------------------------------------------------------------------------

+) JDK 동적 프록시, CGLIB 프록시 
===============================================================================================