===============================================================================================
- Spring에서의 AOP
: AOP는 스프링 IoC를 보완하여 매우 강력한 미들웨어 솔루션을 제공
-----------------------------------------------------------------------------------------------------------------------------------------------------
- Spring AOP 지원
: @AspectJ 애너테이션 스타일
  스키마 기반 접근
===============================================================================================
- @AspectJ 지원
: https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-ataspectj

-----------------------------------------------------------------------------------------------------------------------------------------------------
@AspectJ는 애너테이션이 있는 일반 Java 클래스로 관점을 선언하는 스타일
@AspectJ 스타일은 AspectJ 5 릴리스의 일부로 AspectJ 프로젝트에 의해 도입
스프링은 pointcut 구문 분석 및 일치를 위해 AspectJ가 제공하는 라이브러리를 사용하여 AspectJ 5와 동일한 애너테이션을 해석
AOP 런타임은 여전히 순수한 스프링 AOP이며, AspectJ 컴파일러나 위버에 의존하지 않는다. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
- @AspectJ 지원 활성화
Spring 설정에서 @AspectJ aspect를 사용하기 위해서
@AspectJ aspect에 기반한 Spring AOP 설정과 이러한 aspect에 의해 조언되는 자동 프록시 빈에 대한 Spring 지원을 활성화해야 한다. 
XML 또는 Java 스타일 설정으로 활성화 가능
-----------------------------------------------------------------------------------------------------------------------------------------------------
1. Java 설정으로 @AspectJ 지원 활성화 방법
: @Configuration으로 @AspectJ 지원을 활성화하려면 @EnableAspectJAutoProxy 애너테이션을 추가

ex) 
@Configuration
@EnableAspectJAutoProxy
public class AppConfig {

}
-----------------------------------------------------------------------------------------------------------------------------------------------------
2. XML 설정으로 @AspectJ 지원 활성화 방법
: XML 기반 구성으로 @AspectJ 지원을 활성화하려면 aop:aspectj-autoproxy 요소를 사용

ex)
<aop:aspectj-autoproxy/>

===============================================================================================
- Aspect 선언
-----------------------------------------------------------------------------------------------------------------------------------------------------
@AspectJ 지원이 활성화되면 @AspectJ 관점(@Aspect 애너테이션이 있음)이 있는 클래스로
애플리케이션 컨텍스트에 정의된 모든 빈이 Spring에서 자동으로 감지되고 Spring AOP를 구성하는 데 사용

===============================================================================================
- 포인트컷 선언
-----------------------------------------------------------------------------------------------------------------------------------------------------
포인트컷은 관심 조인 포인트를 결정 
어드바이스가 실행되는 시기 제어 가능
Spring AOP는 Spring Bean에 대한 메소드 실행 조인 포인트만 지원하므로 Pointcut은 Spring Bean의 메소드 실행과 일치하는 것으로 생각할 수 있다.
pointcut 선언은 이름과 매개변수를 포함하는 서명과 관심 있는 메소드 실행을 정확히 결정하는 pointcut 표현식의 두 부분으로 구성
pointcut 표현식은 @Pointcut 어노테이션을 사용하여 표시

===============================================================================================
- 어드바이스 선언
포인트컷 표현식과 연관되며 포인트컷과 일치하는 메서드 실행 전후 또는 전후에 실행 ???
pointcut 표현식은 명명된 pointcut에 대한 단순 참조이거나 제자리에 선언된 pointcut 표현식일 수 있다. 

-----------------------------------------------------------------------------------------------------------------------------------------------------
+) Schema-based AOP Support
https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-schema
===============================================================================================