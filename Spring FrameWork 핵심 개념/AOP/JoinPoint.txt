===============================================================================================
AOP 적용 위치
-----------------------------------------------------------------------------------------------------------------------------------------------------
: AOP는  메서드 실행 위치 뿐만 아니라 다양한 위치에 적용 가능 
 적용 가능 지점(조인 포인트 ) : 생성자, 필드 값 접근, static 메서드 접근, 메서드 실행
 AOP 를 수행하는 메소드는 이 JoinPoint 인스턴스를 인자로 받는다. 
 JoinPoint 인스턴스에서 조인 포인트 지점의 정보를 얻어내야 한다. 
===============================================================================================
Join Point 
: 추상적인 개념으로 AOP를 적용할 수 있는 지점을 의미 
-----------------------------------------------------------------------------------------------------------------------------------------------------
어드바이스가 적용될 수 있는 위치, 메소드 실행, 생성자 호출, 필드 값 접근, static 메서드 접근 같은 프로그램 실행 중 지점을 나타낸다. 
AspectJ를 사용해서 컴파일 시점과 클래스 로딩 시점에 적용하는 AOP는 바이트코드를 실제 조작 -> 해당 기능을 모든 지점에 적용 가능 
프록시 방식을 사용하는 스프링 AOP는 메서드 실행 지점에만 AOP 적용 가능
( 프록시를 사용하는 스프링 AOP의 조인 포인트는 메서드 실행으로 제한 )
프록시는 메서드 오버라이딩 개념으로 동작
생성자나 static 메서드, 필드 값 접근에는 프록시 개념이 적용될 수 없다. 
프록시 방식을 사용하는 스프링 AOP는 스프링 컨테이너가 관리할 수 있는 스프링 빈에만 AOP 적용 가능
JoinPoint 메소드는 어드바이스의 종류에 따라 사용방법 다르지만, 기본적으로 어드바이스 메소드에 매개변수로 선언만 하면 된다. 
===============================================================================================
JoinPoint 인터페이스의 주요 기능
-----------------------------------------------------------------------------------------------------------------------------------------------------

1) JoinPoint.getArgs() : JoinPoint에 전달된 인자를 배열로 반환
2) JoinPoint.getThis() : AOP 프록시 객체를 반환
3) JoinPoint.getTarget() : AOP가 적용된 대상 객체를 반환
  		       ( 클라이언트가 호출한 비즈니스 메소드를 포함하는 비즈니스 객체를 반환 )

4) JoinPoint.getSignature() : 조언되는 메서드에 대한 설명을 반환
   - 클라이언트가 호출한 메소드의 시그니처(리턴타입, 이름, 매개변수) 정보가 저장된 Signature 객체를 반환
   - 시그니처( Signature) : 객체가 선언하는 모든 연산에서 연산의 이름, 매개변수로 받아들이는 객체들
   - Signature가 제공하는 메서드
     (1) String getName() : 클라이언트가 호출한 메소드의 이름을 반환
     (2) String toLongString() : 클라리언트가 호출한 메소드의 리턴타입, 이름, 매개변수를 패키지 경로까지 포함해서 반환
     (3) String toShortString() : 클라이언트가 호출한 메소드 시그니처를 축약한 문자열로 반환

5) JoinPoint.toString() : 조언되는 방법에 대한 유용한 설명을 인쇄
===============================================================================================
ProceedingJoinPoint 인터페이스의 주요 기능
-----------------------------------------------------------------------------------------------------------------------------------------------------
proceed() : 다음 어드바이스나 타켓을 호출

===============================================================================================
