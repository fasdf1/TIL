# 브라우저의 작동 원리   // 정리 필요


- 클라이언트 - 서버 아키텍처 ( 2티어 아키텍처 )

  : 리소스가 존재하는 곳과 리소스를 사용하는 앱을 분리시킨 것
  
  - 클라이언트 : 리소스를 사용하는 앱
  - 서버 : 리소스를 제공하는 곳
  
    일반적으로 서버는 리소스를 전달해 주는 역할만 담당 -> 리소스를 별도로 저장할 공간이 필요
  
- 3티어 아키텍처 

  : 기존 2티어 아키텍처에 데이터베이스가 추가된 형태
  
  - 데이터베이스 : 리소스를 저장하는 공간
    
    
- 클라이언트와 서버 종류

  - 클라이언트 : 플랫폼에 따라 구분 
    
    - 웹사이트(웹 앱) : 브라우저를 통해 주로 사용하는 웹 플랫폼에서의 클라이언트 
  
  - 서버 : 무엇을 하느냐에 따라 구분 
  
    - 파일 서버 : 파일을 제공하는 앱
    - 웹 서버 :  웹사이트에서 필요로 하는 정보들을 제공하는 앱
    - 메일 서버 : 메일을 주고 받을 수 있도록 도와주는 앱 
    - 데이터베이스 : 데이터 제공자의 역할이므로 서버라고 볼 수 있다. 
    
- - -


  - 클라이언트 - 서버 통신 : 요청과 응답으로 구성되며, 요청이 있어야만 응답이 발생한다.  
    
    - 웹 애플리케이션 아키텍처에서는 클라이언트와 서버가 HTTP라는 프로토콜을 이용해 통신한다. 
    - HTTP를 이용해 주고 받는 메시지를 HTTP 메시지라고 한다. 
    - 프로토콜 : 통신 규약으로 프로토콜마다 지켜야 하는 규칙이 존재한다. 
    - OSI 7계층과 TCP/IP
       - <img src="http://wiki.hash.kr/images/d/d7/OSI_7_%EA%B3%84%EC%B8%B5%EA%B3%BC_TCPIP.jpg">
      
  - API(Application Programming Interface) 
  
     리소스를 활용할 수 있도록 서버가 클라이언트에게 제공하는 인터페이스   
     메뉴판과 비슷한 역할  
     서버가 API를 작성해야 클라이언트가 이를 활용할 수 있다
    
    인터넷 상에서 데이터를 요청할 때 주소(URL, URI)를 통해 접근하는 HTTP 프로토콜을 사용한다.  
    HTTP 요청에는 CRUD 행동과 비슷한 메소드라는 것이 존재한다. 
    - CRUD 각 행동과 일치하는 HTTP 메소드  

	  -   GET : 조회
	  -   POST : 추가
	  -   PUT(PATCH) : 갱신
	  -   DELETE : 삭제   

- - -
- 브라우저의 작동 원리 ( 보이지 않는 곳)
  
  - URL과 URI
  
	 <hr>  
     - URL ( Uniform Resource Locator )
     
     네트워크 상에서 웹 페이지, 이미지, 동영상 등의 파일이 위치한 정보
  
    ( 서버 제공 환경에 존재하는 파일의 위치를 나타낸다.)
     
     슬래시(/)를 이용해 서버의 폴더에 진입하거나 파일을 요청할 수 있다.
     
     (외부에서 직접적인 접근은 불가능)
     
     URL은 scheme, hosts, url- path로 구분된다. 
     
     1. sheme : 통신 방식(프로토콜)을 결정, 일반적인 웹 브라우저에서는 http(s)를 사용
     2. hosts : 웹 서버의 이름이나 도메인, IP를 사용해 주소를 나타낸다. 
     3. url-pth : 웹 서버의 루트 디렉토리로부터 파일이 위치한 경로와 파일명을 나타낸다.  
      
     <hr>
     - URI
     
     <hr>
     
  - IP와 포트
  - 도메인과 DNS
  - 크롬 브라우저 에러  

- - - 
- 
