----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
< REST API >
----------------------------------------------------------------------------------------------------------------------------
- REST API란?

클라이언트와 서버가 HTTP 통신을 할 때 어떤 요청을 보내고 받느냐에 따라 메서드의 사용이 달라진다. 
요청과 응답을 할 때, '제대로 보내고 받을 수 있는' 일종의 규약이 존재
REST는 “Representational State Transfer”의 약자로 웹(http)의 장점을 최대한 활용할 수 있는 아키텍처
REST API는 웹에서 사용되는 데이터나 자원을 HTTP URI로 표현하고, HTTP 프로토콜을 통해 요청을 정의하는 방식이다.  

HTTP 프로토콜 기반의 요청과 응답에 따라 리소스를 주고 받게 해주는 역할을 API가 수행하며, API를 알아보기 쉽게 잘 작성해야 한다. 
( 클라이언트와 서버 사이에서 데이터/리소스를 요청하고 요청에 따른 응답을 전달하기 위한 메뉴판으로 생각 ) 
----------------------------------------------------------------------------------------------------------------------------
- 좋은 RET API를 디자인하는 방법 

REST API 작성할 때 지켜야 할 규칙이 존재한다.
로이 필딩의 REST 방법론을 보다 쉽게 적용하게 위한 리차드슨의 REST 성숙도 모델(RMM)

3 단계 : HATEOAS 원칙 준수 
2 단계 : HTTP 메소드 원칙 준수
1 단계 : 개별 리소스와의 통신 준수
0 단계 : HTTP 사용

원칙적으로는 모든 단계를 충족해야 REST API라고 부를 수 있지만
실제로는 3단계까지 지키기 어렵기 때문에 2단계까지만 적용해도 좋은 API 디자인, 이 경우에는 HTTP API라고 부른다. 

0단계 
: 좋은 REST API를 작성하기 위한 기본 단계로 단순히 HTTP 프로토콜을 사용하는 것

1단계 
: REST API는 모든 데이터나 자원을 HTTP URI로 표현하기 때문에 
  모든 자원은 개별 리소스에 맞는 EndPoint를 사용해야 하고,
  요청하고 받은 자원에 대한 정보를 응답으로 전달해야 한다.  

어떤 리소스를 변화시키는지 혹은 어떤 응답이 제공되는지에 따라 각기 다른 엔드포인트를 사용하기 때문에, 적절한 엔드포인트를 작성하는 것이 중요
엔드포인트 작성 시에는 동사, HTTP 메서드, 혹은 어떤 행위에 대한 단어 사용은 지양하고, 리소스에 집중해 명사 형태의 단어로 작성하는 것이 바람직하다. 
 요청에 따른 응답으로 리소스를 전달할 때에도 사용한 리소스에 대한 정보와 함께 리소스 사용에 대한 성공/실패 여부를 반환해야 한다. 

2단계 
: CRUD에 맞게 적절한 HTTP 메서드를 사용하는 것에 중점
  응답 코드도 명확히 작성 
  관련 리소스를 클라이언트가 Location 헤더에 작성된 URI를 통해 확인할 수 있도록 해야, 완벽하게 REST 성숙도 모델의 2단계를 충족
  - 메서드 사용 시 규칙 
  1. GET 메서드 : 서버의 데이터를 변화시키지 않는 요청에 사용 ex)잔여좌석 확인
  2. POST 메서드 : 요청마다 새로운 리소스를 생성
  3. PUT 메서드 : 요청마다 같은 리소스를 반환합니다. 
  +) 매 요청마다 같은 리소스를 반환하는 특징:  멱등(idempotent)하다
  !) 멱등성을 가지는 메서드 PUT과 그렇지 않은 POST는 구분하여 사용
  4. PUT 과 PATCH 도 구분하여 사용
      PUT은 교체, PATCH는 수정의 용도로 사용 
     cf) MDN HTTP request methods

3단계
 :  HATEOAS(Hypertext As The Engine Of Application State)라는 약어로 표현되는 하이퍼미디어 컨트롤을 적용
   3단계의 요청은 2단계와 동일하지만, 응답에는 리소스의 URI를 포함한 링크 요소를 삽입하여 작성한다
   응답에 들어가게 되는 링크 요소는 응답을 받은 다음에 할 수 있는 다양한 액션들을 위해 많은 하이퍼미디어 컨트롤을 포함

REST API 작성 가이드
https://blog.restcase.com/5-basic-rest-api-design-guidelines/
https://api.gov.au/standards/national_api_standards/
https://cloud.google.com/apis/design?hl=ko
https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md

+) 언어별 다른 응답 
 Accept-Language 헤더를 요청에 함께 제공(기존 엔드포인트를 그대로 활용할 수도 있다)
+) 특정 게시물 삭제 엔드포인트 
본문(body)을 통해 전달하는 것보다는, 엔드포인트에 리소스를 명시하는 편이 좋다. 
백엔드 구현에서 본문을 같이 전달할 경우 DELETE 요청 자체를 거절하는 경우가 종종 발생(HTTP 스펙 근거)
----------------------------------------------------------------------------------------------------------------------------
Open API
누구에게나 열려있는 API
기관이나 API마다 정해진 이용 수칙과 이용 수칙에 따른 제한사항이 있다. 

정부에서 제공하는 공공데이터에 쉽게 접근할 수 있도록 정부는 Open API의 형태로 공공데이터를 제공
https://www.data.go.kr/ -> 키워드 검색을 통해 키워드와 관련된 API 확인 가능 

https://openweathermap.org/api -> 날씨 API, 응답 데이터는 JSON 형태
----------------------------------------------------------------------------------------------------------------------------
API Key
API를 이용하기 위해 필요
로그인된 이용자에게만 자원에 접근 가능한 권한을 API Key 형태로 제공
데이터 요청 시 API Key를 같이 전달해야 원하는 응답을 받을 수 있다. 

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
< Postman > 

- HTTP API 테스트 도구 
웹 개발에서 사용되는 대표적인 클라이언트인 브라우저는  주로 웹 페이지를 받아오는 GET 요청에 사용
브라우저의 주소창에 URL을 입력하면, 해당 URL의 root-endpoint로 GET 요청 전송 
( GET이 아닌 다른 요청을 보내려면, 개발자 도구의 콘솔 창에서 내장 함수 fetch를 사용 ) 

HTTP 요청을 테스트할 수 있는 API 테스트 도구라고도 부르는 다양한 도구가 있다.
클라이언트 입장에서 서버 API를 테스트하거나, API를 만드는 과정에서도 매우 유용
 
CLI -> curl, wuzz
GUI -> Postman, Insomnia 

- Postman 사용 
HTTP로 소통하기 위해서는 API 서버의 endpoint가 URL로 주어져야 한다. 
root-endpoint(혹은 root-URL): API로 요청을 서버와 통신할 때, 서버가 요청을 수락하는 시작점
root-endpoint는 도메인 주소의 루트(/) 
Message States Server 의 URL을 기준으로 파악할 수 있는 root-endpoint는 Message States Server의 가장 마지막 Location인 호스트의 루트(/)

path(url-path) :  API를 통해 서버와 통신할 때, 서버와 통신할 수 있는 key 역할, 서버에 정의된 문자열에 따라 path가 달라진다. 
ex) https://api.github.com/user -> path : user 

ex) 
Github API의 root-endpoint :  https://api.github.com
트위터 API의 root-endpoint :  https://api.twitter.com
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------